{
    "iso": {
        "OBJECT IDENTIFIER": {
            "::=": [
                "root",
                1
            ]
        }
    },
    "EXPORTS": [
        [
            "internet",
            "directory",
            "mgmt",
            "experimental",
            "private",
            "enterprises",
            "OBJECT-TYPE",
            "ObjectName",
            "ObjectSyntax",
            "SimpleSyntax",
            "ApplicationSyntax",
            "NetworkAddress",
            "IpAddress",
            "Counter",
            "Gauge",
            "TimeTicks",
            "Opaque"
        ]
    ],
    "internet": {
        "OBJECT IDENTIFIER": {
            "::=": [
                "dod",
                1
            ]
        }
    },
    "directory": {
        "OBJECT IDENTIFIER": {
            "::=": [
                "internet",
                1
            ]
        }
    },
    "mgmt": {
        "OBJECT IDENTIFIER": {
            "::=": [
                "internet",
                2
            ]
        }
    },
    "experimental": {
        "OBJECT IDENTIFIER": {
            "::=": [
                "internet",
                3
            ]
        }
    },
    "private": {
        "OBJECT IDENTIFIER": {
            "::=": [
                "internet",
                4
            ]
        }
    },
    "enterprises": {
        "OBJECT IDENTIFIER": {
            "::=": [
                "private",
                1
            ]
        }
    },
    "OBJECT-TYPE": {
        "TYPE NOTATION": {},
        "VALUE NOTATION": {}
    },
    "ObjectName": "OBJECT IDENTIFIER",
    "ObjectSyntax": {
        "CHOICE": [
            [
                "simple",
                "SimpleSyntax"
            ],
            [
                "application-wide",
                "ApplicationSyntax"
            ]
        ]
    },
    "SimpleSyntax": {
        "CHOICE": [
            [
                "integer-value",
                [
                    "INTEGER",
                    {
                        "min": -2147483648,
                        "max": 2147483647
                    }
                ]
            ],
            [
                "string-value",
                [
                    "OCTET STRING",
                    {
                        "SIZE": {
                            "min": 0,
                            "max": 65535
                        }
                    }
                ]
            ],
            [
                "objectID-value",
                "OBJECT IDENTIFIER"
            ]
        ]
    },
    "ApplicationSyntax": {
        "CHOICE": [
            [
                "ipAddress-value",
                "IpAddress"
            ],
            [
                "counter-value",
                "Counter32"
            ],
            [
                "timeticks-value",
                "TimeTicks"
            ],
            [
                "arbitrary-value",
                "Opaque"
            ],
            [
                "big-counter-value",
                "Counter64"
            ],
            [
                "unsigned-integer-value",
                "Unsigned32"
            ]
        ]
    },
    "NetworkAddress": {
        "CHOICE": [
            "internet",
            "IpAddress"
        ]
    },
    "IpAddress": {
        "tag": {
            "class": "APPLICATION",
            "number": 0
        },
        "definition": "IMPLICIT",
        "type": [
            "OCTET STRING",
            {
                "SIZE": 4
            }
        ]
    },
    "Counter": {
        "tag": {
            "class": "APPLICATION",
            "number": 1
        },
        "definition": "IMPLICIT",
        "type": [
            "INTEGER",
            {
                "min": 0,
                "max": 4294967295
            }
        ]
    },
    "Gauge": {
        "tag": {
            "class": "APPLICATION",
            "number": 2
        },
        "definition": "IMPLICIT",
        "type": [
            "INTEGER",
            {
                "min": 0,
                "max": 4294967295
            }
        ]
    },
    "TimeTicks": {
        "tag": {
            "class": "APPLICATION",
            "number": 3
        },
        "definition": "IMPLICIT",
        "type": [
            "INTEGER",
            {
                "min": 0,
                "max": 4294967295
            }
        ]
    },
    "Opaque": {
        "tag": {
            "class": "APPLICATION",
            "number": 4
        },
        "definition": "IMPLICIT",
        "type": "OCTET STRING"
    },
    "IMPORTS": {
        "FROM": [
            {
                "SNMPv2-SMI": [
                    "MODULE-IDENTITY",
                    "OBJECT-TYPE",
                    "NOTIFICATION-TYPE",
                    "TimeTicks",
                    "Counter32",
                    "snmpModules",
                    "mib-2"
                ]
            },
            {
                "SNMPv2-TC": [
                    "DisplayString",
                    "TestAndIncr",
                    "TimeStamp"
                ]
            },
            {
                "SNMPv2-CONF": [
                    "MODULE-COMPLIANCE",
                    "OBJECT-GROUP",
                    "NOTIFICATION-GROUP"
                ]
            }
        ]
    },
    "DisplayString": {
        "TEXTUAL-CONVENTION": {
            "DISPLAY-HINT": [
                "255a"
            ],
            "STATUS": "current",
            "DESCRIPTION": [
                "Represents textual information taken from the NVT ASCII",
                "character set, as defined in pages 4, 10-11 of RFC 854.",
                "",
                "To summarize RFC 854, the NVT ASCII repertoire specifies:",
                "",
                "- the use of character codes 0-127 (decimal)",
                "",
                "- the graphics characters (32-126) are interpreted as",
                "US ASCII",
                "",
                "- NUL, LF, CR, BEL, BS, HT, VT and FF have the special",
                "meanings specified in RFC 854",
                "",
                "- the other 25 codes have no standard interpretation",
                "",
                "- the sequence 'CR LF' means newline",
                "",
                "- the sequence 'CR NUL' means carriage-return",
                "",
                "- an 'LF' not preceded by a 'CR' means moving to the",
                "same column on the next line.",
                "",
                "- the sequence 'CR x' for any x other than LF or NUL is",
                "illegal.  (Note that this also means that a string may",
                "end with either 'CR LF' or 'CR NUL', but not with CR.)",
                "",
                "Any object defined using this syntax may not exceed 255 characters in length."
            ],
            "SYNTAX": [
                "OCTET STRING",
                {
                    "SIZE": {
                        "min": 0,
                        "max": 255
                    }
                }
            ]
        }
    },
    "mib-2": {
        "OBJECT IDENTIFIER": {
            "::=": [
                "mgmt",
                1
            ]
        }
    },
    "system": {
        "OBJECT IDENTIFIER": {
            "::=": [
                "mib-2",
                1
            ]
        }
    },
    "interfaces": {
        "OBJECT IDENTIFIER": {
            "::=": [
                "mib-2",
                2
            ]
        }
    },
    "at": {
        "OBJECT IDENTIFIER": {
            "::=": [
                "mib-2",
                3
            ]
        }
    },
    "ip": {
        "OBJECT IDENTIFIER": {
            "::=": [
                "mib-2",
                4
            ]
        }
    },
    "icmp": {
        "OBJECT IDENTIFIER": {
            "::=": [
                "mib-2",
                5
            ]
        }
    },
    "tcp": {
        "OBJECT IDENTIFIER": {
            "::=": [
                "mib-2",
                6
            ]
        }
    },
    "udp": {
        "OBJECT IDENTIFIER": {
            "::=": [
                "mib-2",
                7
            ]
        }
    },
    "egp": {
        "OBJECT IDENTIFIER": {
            "::=": [
                "mib-2",
                8
            ]
        }
    },
    "transmission": {
        "OBJECT IDENTIFIER": {
            "::=": [
                "mib-2",
                10
            ]
        }
    },
    "snmp": {
        "OBJECT IDENTIFIER": {
            "::=": [
                "mib-2",
                11
            ]
        }
    },
    "sysDescr": {
        "OBJECT-TYPE": {
            "SYNTAX": [
                "DisplayString",
                {
                    "SIZE": {
                        "min": 0,
                        "max": 255
                    }
                }
            ],
            "MAX-ACCESS": "read-only",
            "STATUS": "current",
            "DESCRIPTION": [
                "A textual description of the entity.  This value should",
                "include the full name and version identification of",
                "the system's hardware type, software operating-system,",
                "and networking software."
            ],
            "::=": [
                "system",
                1
            ]
        }
    },
    "sysObjectID": {
        "OBJECT-TYPE": {
            "SYNTAX": "OBJECT IDENTIFIER",
            "MAX-ACCESS": "read-only",
            "STATUS": "current",
            "DESCRIPTION": [
                "The vendor's authoritative identification of the",
                "network management subsystem contained in the entity.",
                "This value is allocated within the SMI enterprises",
                "subtree (1.3.6.1.4.1) and provides an easy and",
                "unambiguous means for determining `what kind of box' is",
                "being managed.  For example, if vendor `Flintstones,",
                "Inc.' was assigned the subtree 1.3.6.1.4.1.424242,",
                "it could assign the identifier 1.3.6.1.4.1.424242.1.1",
                "to its `Fred Router'."
            ],
            "::=": [
                "system",
                2
            ]
        }
    },
    "sysUpTime": {
        "OBJECT-TYPE": {
            "SYNTAX": "TimeTicks",
            "MAX-ACCESS": "read-only",
            "STATUS": "current",
            "DESCRIPTION": [
                "The time (in hundredths of a second) since the",
                "network management portion of the system was last",
                "re-initialized."
            ],
            "::=": [
                "system",
                3
            ]
        }
    },
    "sysContact": {
        "OBJECT-TYPE": {
            "SYNTAX": [
                "DisplayString",
                {
                    "SIZE": {
                        "min": 0,
                        "max": 255
                    }
                }
            ],
            "MAX-ACCESS": "read-write",
            "STATUS": "current",
            "DESCRIPTION": [
                "The textual identification of the contact person for",
                "this managed node, together with information on how",
                "to contact this person.  If no contact information is",
                "known, the value is the zero-length string."
            ],
            "::=": [
                "system",
                4
            ]
        }
    },
    "sysName": {
        "OBJECT-TYPE": {
            "SYNTAX": [
                "DisplayString",
                {
                    "SIZE": {
                        "min": 0,
                        "max": 255
                    }
                }
            ],
            "MAX-ACCESS": "read-write",
            "STATUS": "current",
            "DESCRIPTION": [
                "An administratively-assigned name for this managed",
                "node.  By convention, this is the node's fully-qualified",
                "domain name.  If the name is unknown, the value is",
                "the zero-length string."
            ],
            "::=": [
                "system",
                5
            ]
        }
    },
    "sysLocation": {
        "OBJECT-TYPE": {
            "SYNTAX": [
                "DisplayString",
                {
                    "SIZE": {
                        "min": 0,
                        "max": 255
                    }
                }
            ],
            "MAX-ACCESS": "read-write",
            "STATUS": "current",
            "DESCRIPTION": [
                "The physical location of this node (e.g., 'telephone",
                "closet, 3rd floor').  If the location is unknown, the",
                "value is the zero-length string."
            ],
            "::=": [
                "system",
                6
            ]
        }
    },
    "sysServices": {
        "OBJECT-TYPE": {
            "SYNTAX": [
                "INTEGER",
                {
                    "min": 0,
                    "max": 127
                }
            ],
            "MAX-ACCESS": "read-only",
            "STATUS": "current",
            "DESCRIPTION": [
                "A value which indicates the set of services that this",
                "entity may potentially offer.  The value is a sum.",
                "",
                "This sum initially takes the value zero. Then, for",
                "each layer, L, in the range 1 through 7, that this node",
                "performs transactions for, 2 raised to (L - 1) is added",
                "to the sum.  For example, a node which performs only",
                "routing functions would have a value of 4 (2^(3-1)).",
                "In contrast, a node which is a host offering application",
                "services would have a value of 72 (2^(4-1) + 2^(7-1)).",
                "Note that in the context of the Internet suite of",
                "protocols, values should be calculated accordingly:",
                "",
                "layer      functionality",
                "1        physical (e.g., repeaters)",
                "2        datalink/subnetwork (e.g., bridges)",
                "3        internet (e.g., supports the IP)",
                "4        end-to-end  (e.g., supports the TCP)",
                "7        applications (e.g., supports the SMTP)",
                "",
                "For systems including OSI protocols, layers 5 and 6",
                "may also be counted."
            ],
            "::=": [
                "system",
                7
            ]
        }
    },
    "ifNumber": {
        "OBJECT-TYPE": {
            "SYNTAX": "INTEGER",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of network interfaces (regardless of",
                "their current state) present on this system."
            ],
            "::=": [
                "interfaces",
                1
            ]
        }
    },
    "ifTable": {
        "OBJECT-TYPE": {
            "SYNTAX": [
                "SEQUENCE OF",
                "IfEntry"
            ],
            "ACCESS": "not-accessible",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "A list of interface entries.  The number of",
                "entries is given by the value of ifNumber."
            ],
            "::=": [
                "interfaces",
                2
            ]
        }
    },
    "ifEntry": {
        "OBJECT-TYPE": {
            "SYNTAX": "IfEntry",
            "ACCESS": "not-accessible",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "An interface entry containing objects at the",
                "subnetwork layer and below for a particular",
                "interface."
            ],
            "INDEX": "ifIndex",
            "::=": [
                "ifTable",
                1
            ]
        }
    },
    "IfEntry": {
        "SEQUENCE": [
            [
                "ifIndex",
                "INTEGER"
            ],
            [
                "ifDescr",
                "DisplayString"
            ],
            [
                "ifType",
                "INTEGER"
            ],
            [
                "ifMtu",
                "INTEGER"
            ],
            [
                "ifSpeed",
                "Gauge"
            ],
            [
                "ifPhysAddress",
                "PhysAddress"
            ],
            [
                "ifAdminStatus",
                "INTEGER"
            ],
            [
                "ifOperStatus",
                "INTEGER"
            ],
            [
                "ifLastChange",
                "TimeTicks"
            ],
            [
                "ifInOctets",
                "Counter"
            ],
            [
                "ifInUcastPkts",
                "Counter"
            ],
            [
                "ifInNUcastPkts",
                "Counter"
            ],
            [
                "ifInDiscards",
                "Counter"
            ],
            [
                "ifInErrors",
                "Counter"
            ],
            [
                "ifInUnknownProtos",
                "Counter"
            ],
            [
                "ifOutOctets",
                "Counter"
            ],
            [
                "ifOutUcastPkts",
                "Counter"
            ],
            [
                "ifOutNUcastPkts",
                "Counter"
            ],
            [
                "ifOutDiscards",
                "Counter"
            ],
            [
                "ifOutErrors",
                "Counter"
            ],
            [
                "ifOutQLen",
                "Gauge"
            ],
            [
                "ifSpecific",
                "OBJECT IDENTIFIER"
            ]
        ]
    },
    "ifIndex": {
        "OBJECT-TYPE": {
            "SYNTAX": "INTEGER",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "A unique value for each interface.  Its value",
                "ranges between 1 and the value of ifNumber.  The",
                "value for each interface must remain constant at",
                "least from one re-initialization of the entity's",
                "network management system to the next re-",
                "initialization."
            ],
            "::=": [
                "ifEntry",
                1
            ]
        }
    },
    "ifDescr": {
        "OBJECT-TYPE": {
            "SYNTAX": [
                "DisplayString",
                {
                    "SIZE": {
                        "min": 0,
                        "max": 255
                    }
                }
            ],
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "A textual string containing information about the",
                "interface.  This string should include the name of",
                "the manufacturer, the product name and the version",
                "of the hardware interface."
            ],
            "::=": [
                "ifEntry",
                2
            ]
        }
    },
    "ifType": {
        "OBJECT-TYPE": {
            "SYNTAX": [
                "INTEGER",
                {
                    "1": "other",
                    "2": "regular1822",
                    "3": "hdh1822",
                    "4": "ddn-x25",
                    "5": "rfc877-x25",
                    "6": "ethernet-csmacd",
                    "7": "iso88023-csmacd",
                    "8": "iso88024-tokenBus",
                    "9": "iso88025-tokenRing",
                    "10": "iso88026-man",
                    "11": "starLan",
                    "12": "proteon-10Mbit",
                    "13": "proteon-80Mbit",
                    "14": "hyperchannel",
                    "15": "fddi",
                    "16": "lapb",
                    "17": "sdlc",
                    "18": "ds1",
                    "19": "e1",
                    "20": "basicISDN",
                    "21": "primaryISDN",
                    "22": "propPointToPointSerial",
                    "23": "ppp",
                    "24": "softwareLoopback",
                    "25": "eon",
                    "26": "ethernet-3Mbit",
                    "27": "nsip",
                    "28": "slip",
                    "29": "ultra",
                    "30": "ds3",
                    "31": "sip",
                    "32": "frame-relay"
                }
            ],
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The type of interface, distinguished according to",
                "the physical/link protocol(s) immediately `below'",
                "the network layer in the protocol stack."
            ],
            "::=": [
                "ifEntry",
                3
            ]
        }
    },
    "ifMtu": {
        "OBJECT-TYPE": {
            "SYNTAX": "INTEGER",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The size of the largest datagram which can be",
                "sent/received on the interface, specified in",
                "octets.  For interfaces that are used for",
                "transmitting network datagrams, this is the size",
                "of the largest network datagram that can be sent",
                "on the interface."
            ],
            "::=": [
                "ifEntry",
                4
            ]
        }
    },
    "ifSpeed": {
        "OBJECT-TYPE": {
            "SYNTAX": "Gauge",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "An estimate of the interface's current bandwidth",
                "in bits per second.  For interfaces which do not",
                "vary in bandwidth or for those where no accurate",
                "estimation can be made, this object should contain",
                "the nominal bandwidth."
            ],
            "::=": [
                "ifEntry",
                5
            ]
        }
    },
    "ifPhysAddress": {
        "OBJECT-TYPE": {
            "SYNTAX": "PhysAddress",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The interface's address at the protocol layer",
                "immediately `below' the network layer in the",
                "protocol stack.  For interfaces which do not have",
                "",
                "such an address (e.g., a serial line), this object",
                "should contain an octet string of zero length."
            ],
            "::=": [
                "ifEntry",
                6
            ]
        }
    },
    "ifAdminStatus": {
        "OBJECT-TYPE": {
            "SYNTAX": [
                "INTEGER",
                {
                    "1": "up",
                    "2": "down",
                    "3": "testing"
                }
            ],
            "ACCESS": "read-write",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The desired state of the interface.  The",
                "testing(3) state indicates that no operational",
                "packets can be passed."
            ],
            "::=": [
                "ifEntry",
                7
            ]
        }
    },
    "ifOperStatus": {
        "OBJECT-TYPE": {
            "SYNTAX": [
                "INTEGER",
                {
                    "1": "up",
                    "2": "down",
                    "3": "testing"
                }
            ],
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The current operational state of the interface.",
                "The testing(3) state indicates that no operational",
                "packets can be passed."
            ],
            "::=": [
                "ifEntry",
                8
            ]
        }
    },
    "ifLastChange": {
        "OBJECT-TYPE": {
            "SYNTAX": "TimeTicks",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The value of sysUpTime at the time the interface",
                "entered its current operational state.  If the",
                "current state was entered prior to the last re-",
                "initialization of the local network management",
                "subsystem, then this object contains a zero",
                "value."
            ],
            "::=": [
                "ifEntry",
                9
            ]
        }
    },
    "ifInOctets": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The total number of octets received on the",
                "interface, including framing characters."
            ],
            "::=": [
                "ifEntry",
                10
            ]
        }
    },
    "ifInUcastPkts": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of subnetwork-unicast packets",
                "delivered to a higher-layer protocol."
            ],
            "::=": [
                "ifEntry",
                11
            ]
        }
    },
    "ifInNUcastPkts": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of non-unicast (i.e., subnetwork-",
                "broadcast or subnetwork-multicast) packets",
                "delivered to a higher-layer protocol."
            ],
            "::=": [
                "ifEntry",
                12
            ]
        }
    },
    "ifInDiscards": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of inbound packets which were chosen",
                "to be discarded even though no errors had been",
                "detected to prevent their being deliverable to a",
                "higher-layer protocol.  One possible reason for",
                "discarding such a packet could be to free up",
                "buffer space."
            ],
            "::=": [
                "ifEntry",
                13
            ]
        }
    },
    "ifInErrors": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of inbound packets that contained",
                "errors preventing them from being deliverable to a",
                "higher-layer protocol."
            ],
            "::=": [
                "ifEntry",
                14
            ]
        }
    },
    "ifInUnknownProtos": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of packets received via the interface",
                "which were discarded because of an unknown or",
                "unsupported protocol."
            ],
            "::=": [
                "ifEntry",
                15
            ]
        }
    },
    "ifOutOctets": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The total number of octets transmitted out of the",
                "interface, including framing characters."
            ],
            "::=": [
                "ifEntry",
                16
            ]
        }
    },
    "ifOutUcastPkts": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The total number of packets that higher-level",
                "protocols requested be transmitted to a",
                "subnetwork-unicast address, including those that",
                "were discarded or not sent."
            ],
            "::=": [
                "ifEntry",
                17
            ]
        }
    },
    "ifOutNUcastPkts": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The total number of packets that higher-level",
                "protocols requested be transmitted to a non-",
                "unicast (i.e., a subnetwork-broadcast or",
                "subnetwork-multicast) address, including those",
                "that were discarded or not sent."
            ],
            "::=": [
                "ifEntry",
                18
            ]
        }
    },
    "ifOutDiscards": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of outbound packets which were chosen",
                "",
                "to be discarded even though no errors had been",
                "detected to prevent their being transmitted.  One",
                "possible reason for discarding such a packet could",
                "be to free up buffer space."
            ],
            "::=": [
                "ifEntry",
                19
            ]
        }
    },
    "ifOutErrors": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of outbound packets that could not be",
                "transmitted because of errors."
            ],
            "::=": [
                "ifEntry",
                20
            ]
        }
    },
    "ifOutQLen": {
        "OBJECT-TYPE": {
            "SYNTAX": "Gauge",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The length of the output packet queue (in",
                "packets)."
            ],
            "::=": [
                "ifEntry",
                21
            ]
        }
    },
    "ifSpecific": {
        "OBJECT-TYPE": {
            "SYNTAX": "OBJECT IDENTIFIER",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "A reference to MIB definitions specific to the",
                "particular media being used to realize the",
                "interface.  For example, if the interface is",
                "realized by an ethernet, then the value of this",
                "object refers to a document defining objects",
                "specific to ethernet.  If this information is not",
                "present, its value should be set to the OBJECT",
                "IDENTIFIER { 0 0 }, which is a syntatically valid",
                "object identifier, and any conformant",
                "implementation of ASN.1 and BER must be able to",
                "generate and recognize this value."
            ],
            "::=": [
                "ifEntry",
                22
            ]
        }
    },
    "nullSpecific": {
        "OBJECT IDENTIFIER": {
            "::=": [
                0,
                0
            ]
        }
    },
    "atTable": {
        "OBJECT-TYPE": {
            "SYNTAX": [
                "SEQUENCE OF",
                "AtEntry"
            ],
            "ACCESS": "not-accessible",
            "STATUS": "deprecated",
            "DESCRIPTION": [
                "The Address Translation tables contain the",
                "NetworkAddress to `physical' address equivalences.",
                "Some interfaces do not use translation tables for",
                "determining address equivalences (e.g., DDN-X.25",
                "has an algorithmic method); if all interfaces are",
                "of this type, then the Address Translation table",
                "is empty, i.e., has zero entries."
            ],
            "::=": [
                "at",
                1
            ]
        }
    },
    "atEntry": {
        "OBJECT-TYPE": {
            "SYNTAX": "AtEntry",
            "ACCESS": "not-accessible",
            "STATUS": "deprecated",
            "DESCRIPTION": [
                "Each entry contains one NetworkAddress to",
                "`physical' address equivalence."
            ],
            "INDEX": [
                "atIfIndex",
                "atNetAddress"
            ],
            "::=": [
                "atTable",
                1
            ]
        }
    },
    "AtEntry": {
        "SEQUENCE": [
            [
                "atIfIndex",
                "INTEGER"
            ],
            [
                "atPhysAddress",
                "PhysAddress"
            ],
            [
                "atNetAddress",
                "NetworkAddress"
            ]
        ]
    },
    "atIfIndex": {
        "OBJECT-TYPE": {
            "SYNTAX": "INTEGER",
            "ACCESS": "read-write",
            "STATUS": "deprecated",
            "DESCRIPTION": [
                "The interface on which this entry's equivalence",
                "is effective.  The interface identified by a",
                "particular value of this index is the same",
                "interface as identified by the same value of",
                "ifIndex."
            ],
            "::=": [
                "atEntry",
                1
            ]
        }
    },
    "atPhysAddress": {
        "OBJECT-TYPE": {
            "SYNTAX": "PhysAddress",
            "ACCESS": "read-write",
            "STATUS": "deprecated",
            "DESCRIPTION": [
                "The media-dependent `physical' address.",
                "",
                "Setting this object to a null string (one of zero",
                "length) has the effect of invaliding the",
                "corresponding entry in the atTable object.  That",
                "is, it effectively dissasociates the interface",
                "identified with said entry from the mapping",
                "identified with said entry.  It is an",
                "implementation-specific matter as to whether the",
                "agent removes an invalidated entry from the table.",
                "Accordingly, management stations must be prepared",
                "to receive tabular information from agents that",
                "corresponds to entries not currently in use.",
                "Proper interpretation of such entries requires",
                "examination of the relevant atPhysAddress object."
            ],
            "::=": [
                "atEntry",
                2
            ]
        }
    },
    "atNetAddress": {
        "OBJECT-TYPE": {
            "SYNTAX": "NetworkAddress",
            "ACCESS": "read-write",
            "STATUS": "deprecated",
            "DESCRIPTION": [
                "The NetworkAddress (e.g., the IP address)",
                "corresponding to the media-dependent `physical'",
                "address."
            ],
            "::=": [
                "atEntry",
                3
            ]
        }
    },
    "ipForwarding": {
        "OBJECT-TYPE": {
            "SYNTAX": [
                "INTEGER",
                {
                    "1": "forwarding",
                    "2": "not-forwarding"
                }
            ],
            "ACCESS": "read-write",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The indication of whether this entity is acting",
                "as an IP gateway in respect to the forwarding of",
                "datagrams received by, but not addressed to, this",
                "entity.  IP gateways forward datagrams.  IP hosts",
                "do not (except those source-routed via the host).",
                "",
                "Note that for some managed nodes, this object may",
                "take on only a subset of the values possible.",
                "Accordingly, it is appropriate for an agent to",
                "return a `badValue' response if a management",
                "station attempts to change this object to an",
                "inappropriate value."
            ],
            "::=": [
                "ip",
                1
            ]
        }
    },
    "ipDefaultTTL": {
        "OBJECT-TYPE": {
            "SYNTAX": "INTEGER",
            "ACCESS": "read-write",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The default value inserted into the Time-To-Live",
                "field of the IP header of datagrams originated at",
                "this entity, whenever a TTL value is not supplied",
                "by the transport layer protocol."
            ],
            "::=": [
                "ip",
                2
            ]
        }
    },
    "ipInReceives": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The total number of input datagrams received from",
                "interfaces, including those received in error."
            ],
            "::=": [
                "ip",
                3
            ]
        }
    },
    "ipInHdrErrors": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of input datagrams discarded due to",
                "errors in their IP headers, including bad",
                "checksums, version number mismatch, other format",
                "errors, time-to-live exceeded, errors discovered",
                "in processing their IP options, etc."
            ],
            "::=": [
                "ip",
                4
            ]
        }
    },
    "ipInAddrErrors": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of input datagrams discarded because",
                "the IP address in their IP header's destination",
                "field was not a valid address to be received at",
                "this entity.  This count includes invalid",
                "addresses (e.g., 0.0.0.0) and addresses of",
                "unsupported Classes (e.g., Class E).  For entities",
                "which are not IP Gateways and therefore do not",
                "forward datagrams, this counter includes datagrams",
                "discarded because the destination address was not",
                "a local address."
            ],
            "::=": [
                "ip",
                5
            ]
        }
    },
    "ipForwDatagrams": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of input datagrams for which this",
                "entity was not their final IP destination, as a",
                "result of which an attempt was made to find a",
                "route to forward them to that final destination.",
                "In entities which do not act as IP Gateways, this",
                "counter will include only those packets which were",
                "Source-Routed via this entity, and the Source-",
                "Route option processing was successful."
            ],
            "::=": [
                "ip",
                6
            ]
        }
    },
    "ipInUnknownProtos": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of locally-addressed datagrams",
                "received successfully but discarded because of an",
                "unknown or unsupported protocol."
            ],
            "::=": [
                "ip",
                7
            ]
        }
    },
    "ipInDiscards": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of input IP datagrams for which no",
                "problems were encountered to prevent their",
                "continued processing, but which were discarded",
                "(e.g., for lack of buffer space).  Note that this",
                "counter does not include any datagrams discarded",
                "while awaiting re-assembly."
            ],
            "::=": [
                "ip",
                8
            ]
        }
    },
    "ipInDelivers": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The total number of input datagrams successfully",
                "delivered to IP user-protocols (including ICMP)."
            ],
            "::=": [
                "ip",
                9
            ]
        }
    },
    "ipOutRequests": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The total number of IP datagrams which local IP",
                "user-protocols (including ICMP) supplied to IP in",
                "requests for transmission.  Note that this counter",
                "does not include any datagrams counted in",
                "ipForwDatagrams."
            ],
            "::=": [
                "ip",
                10
            ]
        }
    },
    "ipOutDiscards": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of output IP datagrams for which no",
                "",
                "problem was encountered to prevent their",
                "transmission to their destination, but which were",
                "discarded (e.g., for lack of buffer space).  Note",
                "that this counter would include datagrams counted",
                "in ipForwDatagrams if any such packets met this",
                "(discretionary) discard criterion."
            ],
            "::=": [
                "ip",
                11
            ]
        }
    },
    "ipOutNoRoutes": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of IP datagrams discarded because no",
                "route could be found to transmit them to their",
                "destination.  Note that this counter includes any",
                "packets counted in ipForwDatagrams which meet this",
                "`no-route' criterion.  Note that this includes any",
                "datagarms which a host cannot route because all of",
                "its default gateways are down."
            ],
            "::=": [
                "ip",
                12
            ]
        }
    },
    "ipReasmTimeout": {
        "OBJECT-TYPE": {
            "SYNTAX": "INTEGER",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The maximum number of seconds which received",
                "fragments are held while they are awaiting",
                "reassembly at this entity."
            ],
            "::=": [
                "ip",
                13
            ]
        }
    },
    "ipReasmReqds": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of IP fragments received which needed",
                "to be reassembled at this entity."
            ],
            "::=": [
                "ip",
                14
            ]
        }
    },
    "ipReasmOKs": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of IP datagrams successfully re-",
                "assembled."
            ],
            "::=": [
                "ip",
                15
            ]
        }
    },
    "ipReasmFails": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of failures detected by the IP re-",
                "assembly algorithm (for whatever reason: timed",
                "out, errors, etc).  Note that this is not",
                "necessarily a count of discarded IP fragments",
                "since some algorithms (notably the algorithm in",
                "RFC 815) can lose track of the number of fragments",
                "by combining them as they are received."
            ],
            "::=": [
                "ip",
                16
            ]
        }
    },
    "ipFragOKs": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of IP datagrams that have been",
                "successfully fragmented at this entity."
            ],
            "::=": [
                "ip",
                17
            ]
        }
    },
    "ipFragFails": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of IP datagrams that have been",
                "discarded because they needed to be fragmented at",
                "this entity but could not be, e.g., because their",
                "Don't Fragment flag was set."
            ],
            "::=": [
                "ip",
                18
            ]
        }
    },
    "ipFragCreates": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of IP datagram fragments that have",
                "been generated as a result of fragmentation at",
                "this entity."
            ],
            "::=": [
                "ip",
                19
            ]
        }
    },
    "ipAddrTable": {
        "OBJECT-TYPE": {
            "SYNTAX": [
                "SEQUENCE OF",
                "IpAddrEntry"
            ],
            "ACCESS": "not-accessible",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The table of addressing information relevant to",
                "this entity's IP addresses."
            ],
            "::=": [
                "ip",
                20
            ]
        }
    },
    "ipAddrEntry": {
        "OBJECT-TYPE": {
            "SYNTAX": "IpAddrEntry",
            "ACCESS": "not-accessible",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The addressing information for one of this",
                "entity's IP addresses."
            ],
            "INDEX": "ipAdEntAddr",
            "::=": [
                "ipAddrTable",
                1
            ]
        }
    },
    "IpAddrEntry": {
        "SEQUENCE": [
            [
                "ipAdEntAddr",
                "IpAddress"
            ],
            [
                "ipAdEntIfIndex",
                "INTEGER"
            ],
            [
                "ipAdEntNetMask",
                "IpAddress"
            ],
            [
                "ipAdEntBcastAddr",
                "INTEGER"
            ],
            [
                "ipAdEntReasmMaxSize",
                [
                    "INTEGER",
                    {
                        "min": 0,
                        "max": 65535
                    }
                ]
            ]
        ]
    },
    "ipAdEntAddr": {
        "OBJECT-TYPE": {
            "SYNTAX": "IpAddress",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The IP address to which this entry's addressing",
                "information pertains."
            ],
            "::=": [
                "ipAddrEntry",
                1
            ]
        }
    },
    "ipAdEntIfIndex": {
        "OBJECT-TYPE": {
            "SYNTAX": "INTEGER",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The index value which uniquely identifies the",
                "interface to which this entry is applicable.  The",
                "interface identified by a particular value of this",
                "index is the same interface as identified by the",
                "same value of ifIndex."
            ],
            "::=": [
                "ipAddrEntry",
                2
            ]
        }
    },
    "ipAdEntNetMask": {
        "OBJECT-TYPE": {
            "SYNTAX": "IpAddress",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The subnet mask associated with the IP address of",
                "this entry.  The value of the mask is an IP",
                "address with all the network bits set to 1 and all",
                "the hosts bits set to 0."
            ],
            "::=": [
                "ipAddrEntry",
                3
            ]
        }
    },
    "ipAdEntBcastAddr": {
        "OBJECT-TYPE": {
            "SYNTAX": "INTEGER",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The value of the least-significant bit in the IP",
                "broadcast address used for sending datagrams on",
                "the (logical) interface associated with the IP",
                "address of this entry.  For example, when the",
                "Internet standard all-ones broadcast address is",
                "used, the value will be 1.  This value applies to",
                "both the subnet and network broadcasts addresses",
                "used by the entity on this (logical) interface."
            ],
            "::=": [
                "ipAddrEntry",
                4
            ]
        }
    },
    "ipAdEntReasmMaxSize": {
        "OBJECT-TYPE": {
            "SYNTAX": [
                "INTEGER",
                {
                    "min": 0,
                    "max": 65535
                }
            ],
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The size of the largest IP datagram which this",
                "entity can re-assemble from incoming IP fragmented",
                "datagrams received on this interface."
            ],
            "::=": [
                "ipAddrEntry",
                5
            ]
        }
    },
    "ipRoutingTable": {
        "OBJECT-TYPE": {
            "SYNTAX": [
                "SEQUENCE OF",
                "IpRouteEntry"
            ],
            "ACCESS": "read-write",
            "STATUS": "mandatory",
            "::=": [
                "ip",
                21
            ]
        }
    },
    "ipRouteEntry": {
        "OBJECT-TYPE": {
            "SYNTAX": "IpRouteEntry",
            "ACCESS": "not-accessible",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "A route to a particular destination."
            ],
            "INDEX": "ipRouteDest",
            "::=": [
                "ipRouteTable",
                1
            ]
        }
    },
    "IpRouteEntry": {
        "SEQUENCE": [
            [
                "ipRouteDest",
                "IpAddress"
            ],
            [
                "ipRouteIfIndex",
                "INTEGER"
            ],
            [
                "ipRouteMetric1",
                "INTEGER"
            ],
            [
                "ipRouteMetric2",
                "INTEGER"
            ],
            [
                "ipRouteMetric3",
                "INTEGER"
            ],
            [
                "ipRouteMetric4",
                "INTEGER"
            ],
            [
                "ipRouteNextHop",
                "IpAddress"
            ],
            [
                "ipRouteType",
                "INTEGER"
            ],
            [
                "ipRouteProto",
                "INTEGER"
            ],
            [
                "ipRouteAge",
                "INTEGER"
            ],
            [
                "ipRouteMask",
                "IpAddress"
            ],
            [
                "ipRouteMetric5",
                "INTEGER"
            ],
            [
                "ipRouteInfo",
                "OBJECT IDENTIFIER"
            ]
        ]
    },
    "ipRouteDest": {
        "OBJECT-TYPE": {
            "SYNTAX": "IpAddress",
            "ACCESS": "read-write",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The destination IP address of this route.  An",
                "entry with a value of 0.0.0.0 is considered a",
                "default route.  Multiple routes to a single",
                "destination can appear in the table, but access to",
                "such multiple entries is dependent on the table-",
                "access mechanisms defined by the network",
                "management protocol in use."
            ],
            "::=": [
                "ipRouteEntry",
                1
            ]
        }
    },
    "ipRouteIfIndex": {
        "OBJECT-TYPE": {
            "SYNTAX": "INTEGER",
            "ACCESS": "read-write",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The index value which uniquely identifies the",
                "local interface through which the next hop of this",
                "route should be reached.  The interface identified",
                "by a particular value of this index is the same",
                "interface as identified by the same value of",
                "ifIndex."
            ],
            "::=": [
                "ipRouteEntry",
                2
            ]
        }
    },
    "ipRouteMetric1": {
        "OBJECT-TYPE": {
            "SYNTAX": "INTEGER",
            "ACCESS": "read-write",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The primary routing metric for this route.  The",
                "semantics of this metric are determined by the",
                "routing-protocol specified in the route's",
                "ipRouteProto value.  If this metric is not used,",
                "its value should be set to -1."
            ],
            "::=": [
                "ipRouteEntry",
                3
            ]
        }
    },
    "ipRouteMetric2": {
        "OBJECT-TYPE": {
            "SYNTAX": "INTEGER",
            "ACCESS": "read-write",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "An alternate routing metric for this route.  The",
                "semantics of this metric are determined by the",
                "routing-protocol specified in the route's",
                "ipRouteProto value.  If this metric is not used,",
                "its value should be set to -1."
            ],
            "::=": [
                "ipRouteEntry",
                4
            ]
        }
    },
    "ipRouteMetric3": {
        "OBJECT-TYPE": {
            "SYNTAX": "INTEGER",
            "ACCESS": "read-write",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "An alternate routing metric for this route.  The",
                "semantics of this metric are determined by the",
                "routing-protocol specified in the route's",
                "ipRouteProto value.  If this metric is not used,",
                "its value should be set to -1."
            ],
            "::=": [
                "ipRouteEntry",
                5
            ]
        }
    },
    "ipRouteMetric4": {
        "OBJECT-TYPE": {
            "SYNTAX": "INTEGER",
            "ACCESS": "read-write",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "An alternate routing metric for this route.  The",
                "semantics of this metric are determined by the",
                "routing-protocol specified in the route's",
                "ipRouteProto value.  If this metric is not used,",
                "its value should be set to -1."
            ],
            "::=": [
                "ipRouteEntry",
                6
            ]
        }
    },
    "ipRouteNextHop": {
        "OBJECT-TYPE": {
            "SYNTAX": "IpAddress",
            "ACCESS": "read-write",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The IP address of the next hop of this route.",
                "(In the case of a route bound to an interface",
                "which is realized via a broadcast media, the value",
                "of this field is the agent's IP address on that",
                "interface.)"
            ],
            "::=": [
                "ipRouteEntry",
                7
            ]
        }
    },
    "ipRouteType": {
        "OBJECT-TYPE": {
            "SYNTAX": [
                "INTEGER",
                {
                    "1": "other",
                    "2": "invalid",
                    "3": "direct",
                    "4": "indirect"
                }
            ],
            "ACCESS": "read-write",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The type of route.  Note that the values",
                "direct(3) and indirect(4) refer to the notion of",
                "direct and indirect routing in the IP",
                "architecture.",
                "",
                "Setting this object to the value invalid(2) has",
                "the effect of invalidating the corresponding entry",
                "in the ipRouteTable object.  That is, it",
                "effectively dissasociates the destination",
                "identified with said entry from the route",
                "identified with said entry.  It is an",
                "implementation-specific matter as to whether the",
                "agent removes an invalidated entry from the table.",
                "Accordingly, management stations must be prepared",
                "to receive tabular information from agents that",
                "corresponds to entries not currently in use.",
                "Proper interpretation of such entries requires",
                "examination of the relevant ipRouteType object."
            ],
            "::=": [
                "ipRouteEntry",
                8
            ]
        }
    },
    "ipRouteProto": {
        "OBJECT-TYPE": {
            "SYNTAX": [
                "INTEGER",
                {
                    "1": "other",
                    "2": "local",
                    "3": "netmgmt",
                    "4": "icmp",
                    "5": "egp",
                    "6": "ggp",
                    "7": "hello",
                    "8": "rip",
                    "9": "is-is",
                    "10": "es-is",
                    "11": "ciscoIgrp",
                    "12": "bbnSpfIgp",
                    "13": "ospf",
                    "14": "bgp"
                }
            ],
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The routing mechanism via which this route was",
                "learned.  Inclusion of values for gateway routing",
                "protocols is not intended to imply that hosts",
                "should support those protocols."
            ],
            "::=": [
                "ipRouteEntry",
                9
            ]
        }
    },
    "ipRouteAge": {
        "OBJECT-TYPE": {
            "SYNTAX": "INTEGER",
            "ACCESS": "read-write",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of seconds since this route was last",
                "updated or otherwise determined to be correct.",
                "Note that no semantics of `too old' can be implied",
                "except through knowledge of the routing protocol",
                "by which the route was learned."
            ],
            "::=": [
                "ipRouteEntry",
                10
            ]
        }
    },
    "ipRouteMask": {
        "OBJECT-TYPE": {
            "SYNTAX": "IpAddress",
            "ACCESS": "read-write",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "Indicate the mask to be logical-ANDed with the",
                "destination address before being compared to the",
                "value in the ipRouteDest field.  For those systems",
                "that do not support arbitrary subnet masks, an",
                "agent constructs the value of the ipRouteMask by",
                "determining whether the value of the correspondent",
                "ipRouteDest field belong to a class-A, B, or C",
                "network, and then using one of:",
                "",
                "mask           network",
                "255.0.0.0      class-A",
                "255.255.0.0    class-B",
                "255.255.255.0  class-C",
                "",
                "If the value of the ipRouteDest is 0.0.0.0 (a",
                "default route), then the mask value is also",
                "0.0.0.0.  It should be noted that all IP routing",
                "subsystems implicitly use this mechanism."
            ],
            "::=": [
                "ipRouteEntry",
                11
            ]
        }
    },
    "ipNetToMediaTable": {
        "OBJECT-TYPE": {
            "SYNTAX": [
                "SEQUENCE OF",
                "IpNetToMediaEntry"
            ],
            "ACCESS": "not-accessible",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The IP Address Translation table used for mapping",
                "from IP addresses to physical addresses."
            ],
            "::=": [
                "ip",
                22
            ]
        }
    },
    "ipNetToMediaEntry": {
        "OBJECT-TYPE": {
            "SYNTAX": "IpNetToMediaEntry",
            "ACCESS": "not-accessible",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "Each entry contains one IpAddress to `physical'",
                "address equivalence."
            ],
            "INDEX": [
                "ipNetToMediaIfIndex",
                "ipNetToMediaNetAddress"
            ],
            "::=": [
                "ipNetToMediaTable",
                1
            ]
        }
    },
    "IpNetToMediaEntry": {
        "SEQUENCE": [
            [
                "ipNetToMediaIfIndex",
                "INTEGER"
            ],
            [
                "ipNetToMediaPhysAddress",
                "PhysAddress"
            ],
            [
                "ipNetToMediaNetAddress",
                "IpAddress"
            ],
            [
                "ipNetToMediaType",
                "INTEGER"
            ]
        ]
    },
    "ipNetToMediaIfIndex": {
        "OBJECT-TYPE": {
            "SYNTAX": "INTEGER",
            "ACCESS": "read-write",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The interface on which this entry's equivalence",
                "is effective.  The interface identified by a",
                "particular value of this index is the same",
                "interface as identified by the same value of",
                "ifIndex."
            ],
            "::=": [
                "ipNetToMediaEntry",
                1
            ]
        }
    },
    "ipNetToMediaPhysAddress": {
        "OBJECT-TYPE": {
            "SYNTAX": "PhysAddress",
            "ACCESS": "read-write",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The media-dependent `physical' address."
            ],
            "::=": [
                "ipNetToMediaEntry",
                2
            ]
        }
    },
    "ipNetToMediaNetAddress": {
        "OBJECT-TYPE": {
            "SYNTAX": "IpAddress",
            "ACCESS": "read-write",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The IpAddress corresponding to the media-",
                "dependent `physical' address."
            ],
            "::=": [
                "ipNetToMediaEntry",
                3
            ]
        }
    },
    "ipNetToMediaType": {
        "OBJECT-TYPE": {
            "SYNTAX": [
                "INTEGER",
                {
                    "1": "other",
                    "2": "invalid",
                    "3": "dynamic",
                    "4": "static"
                }
            ],
            "ACCESS": "read-write",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The type of mapping.",
                "",
                "Setting this object to the value invalid(2) has",
                "the effect of invalidating the corresponding entry",
                "in the ipNetToMediaTable.  That is, it effectively",
                "dissasociates the interface identified with said",
                "entry from the mapping identified with said entry.",
                "It is an implementation-specific matter as to",
                "whether the agent removes an invalidated entry",
                "from the table.  Accordingly, management stations",
                "must be prepared to receive tabular information",
                "from agents that corresponds to entries not",
                "currently in use.  Proper interpretation of such",
                "entries requires examination of the relevant",
                "ipNetToMediaType object."
            ],
            "::=": [
                "ipNetToMediaEntry",
                4
            ]
        }
    },
    "icmpInMsgs": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The total number of ICMP messages which the",
                "entity received.  Note that this counter includes",
                "all those counted by icmpInErrors."
            ],
            "::=": [
                "icmp",
                1
            ]
        }
    },
    "icmpInErrors": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of ICMP messages which the entity",
                "received but determined as having ICMP-specific",
                "errors (bad ICMP checksums, bad length, etc.)."
            ],
            "::=": [
                "icmp",
                2
            ]
        }
    },
    "icmpInDestUnreachs": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of ICMP Destination Unreachable",
                "messages received."
            ],
            "::=": [
                "icmp",
                3
            ]
        }
    },
    "icmpInTimeExcds": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of ICMP Time Exceeded messages",
                "received."
            ],
            "::=": [
                "icmp",
                4
            ]
        }
    },
    "icmpInParmProbs": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of ICMP Parameter Problem messages",
                "received."
            ],
            "::=": [
                "icmp",
                5
            ]
        }
    },
    "icmpInSrcQuenchs": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of ICMP Source Quench messages",
                "received."
            ],
            "::=": [
                "icmp",
                6
            ]
        }
    },
    "icmpInRedirects": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of ICMP Redirect messages received."
            ],
            "::=": [
                "icmp",
                7
            ]
        }
    },
    "icmpInEchos": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of ICMP Echo (request) messages",
                "received."
            ],
            "::=": [
                "icmp",
                8
            ]
        }
    },
    "icmpInEchoReps": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of ICMP Echo Reply messages received."
            ],
            "::=": [
                "icmp",
                9
            ]
        }
    },
    "icmpInTimestamps": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of ICMP Timestamp (request) messages",
                "received."
            ],
            "::=": [
                "icmp",
                10
            ]
        }
    },
    "icmpInTimestampReps": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of ICMP Timestamp Reply messages",
                "received."
            ],
            "::=": [
                "icmp",
                11
            ]
        }
    },
    "icmpInAddrMasks": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of ICMP Address Mask Request messages",
                "received."
            ],
            "::=": [
                "icmp",
                12
            ]
        }
    },
    "icmpInAddrMaskReps": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of ICMP Address Mask Reply messages",
                "received."
            ],
            "::=": [
                "icmp",
                13
            ]
        }
    },
    "icmpOutMsgs": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The total number of ICMP messages which this",
                "entity attempted to send.  Note that this counter",
                "includes all those counted by icmpOutErrors."
            ],
            "::=": [
                "icmp",
                14
            ]
        }
    },
    "icmpOutErrors": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of ICMP messages which this entity did",
                "not send due to problems discovered within ICMP",
                "",
                "such as a lack of buffers.  This value should not",
                "include errors discovered outside the ICMP layer",
                "such as the inability of IP to route the resultant",
                "datagram.  In some implementations there may be no",
                "types of error which contribute to this counter's",
                "value."
            ],
            "::=": [
                "icmp",
                15
            ]
        }
    },
    "icmpOutDestUnreachs": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of ICMP Destination Unreachable",
                "messages sent."
            ],
            "::=": [
                "icmp",
                16
            ]
        }
    },
    "icmpOutTimeExcds": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of ICMP Time Exceeded messages sent."
            ],
            "::=": [
                "icmp",
                17
            ]
        }
    },
    "icmpOutParmProbs": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of ICMP Parameter Problem messages",
                "sent."
            ],
            "::=": [
                "icmp",
                18
            ]
        }
    },
    "icmpOutSrcQuenchs": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of ICMP Source Quench messages sent."
            ],
            "::=": [
                "icmp",
                19
            ]
        }
    },
    "icmpOutRedirects": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of ICMP Redirect messages sent.  For a",
                "",
                "host, this object will always be zero, since hosts",
                "do not send redirects."
            ],
            "::=": [
                "icmp",
                20
            ]
        }
    },
    "icmpOutEchos": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of ICMP Echo (request) messages sent."
            ],
            "::=": [
                "icmp",
                21
            ]
        }
    },
    "icmpOutEchoReps": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of ICMP Echo Reply messages sent."
            ],
            "::=": [
                "icmp",
                22
            ]
        }
    },
    "icmpOutTimestamps": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of ICMP Timestamp (request) messages",
                "sent."
            ],
            "::=": [
                "icmp",
                23
            ]
        }
    },
    "icmpOutTimestampReps": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of ICMP Timestamp Reply messages",
                "sent."
            ],
            "::=": [
                "icmp",
                24
            ]
        }
    },
    "icmpOutAddrMasks": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of ICMP Address Mask Request messages",
                "sent."
            ],
            "::=": [
                "icmp",
                25
            ]
        }
    },
    "icmpOutAddrMaskReps": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of ICMP Address Mask Reply messages",
                "sent."
            ],
            "::=": [
                "icmp",
                26
            ]
        }
    },
    "tcpRtoAlgorithm": {
        "OBJECT-TYPE": {
            "SYNTAX": [
                "INTEGER",
                {
                    "1": "other",
                    "2": "constant",
                    "3": "rsre",
                    "4": "vanj"
                }
            ],
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The algorithm used to determine the timeout value",
                "used for retransmitting unacknowledged octets."
            ],
            "::=": [
                "tcp",
                1
            ]
        }
    },
    "tcpRtoMin": {
        "OBJECT-TYPE": {
            "SYNTAX": "INTEGER",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The minimum value permitted by a TCP",
                "implementation for the retransmission timeout,",
                "measured in milliseconds.  More refined semantics",
                "for objects of this type depend upon the algorithm",
                "used to determine the retransmission timeout.  In",
                "particular, when the timeout algorithm is rsre(3),",
                "an object of this type has the semantics of the",
                "LBOUND quantity described in RFC 793."
            ],
            "::=": [
                "tcp",
                2
            ]
        }
    },
    "tcpRtoMax": {
        "OBJECT-TYPE": {
            "SYNTAX": "INTEGER",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The maximum value permitted by a TCP",
                "implementation for the retransmission timeout,",
                "measured in milliseconds.  More refined semantics",
                "for objects of this type depend upon the algorithm",
                "used to determine the retransmission timeout.  In",
                "particular, when the timeout algorithm is rsre(3),",
                "an object of this type has the semantics of the",
                "UBOUND quantity described in RFC 793."
            ],
            "::=": [
                "tcp",
                3
            ]
        }
    },
    "tcpMaxConn": {
        "OBJECT-TYPE": {
            "SYNTAX": "INTEGER",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The limit on the total number of TCP connections",
                "the entity can support.  In entities where the",
                "maximum number of connections is dynamic, this",
                "object should contain the value -1."
            ],
            "::=": [
                "tcp",
                4
            ]
        }
    },
    "tcpActiveOpens": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of times TCP connections have made a",
                "direct transition to the SYN-SENT state from the",
                "CLOSED state."
            ],
            "::=": [
                "tcp",
                5
            ]
        }
    },
    "tcpPassiveOpens": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of times TCP connections have made a",
                "direct transition to the SYN-RCVD state from the",
                "LISTEN state."
            ],
            "::=": [
                "tcp",
                6
            ]
        }
    },
    "tcpAttemptFails": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of times TCP connections have made a",
                "direct transition to the CLOSED state from either",
                "the SYN-SENT state or the SYN-RCVD state, plus the",
                "number of times TCP connections have made a direct",
                "transition to the LISTEN state from the SYN-RCVD",
                "state."
            ],
            "::=": [
                "tcp",
                7
            ]
        }
    },
    "tcpEstabResets": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of times TCP connections have made a",
                "direct transition to the CLOSED state from either",
                "the ESTABLISHED state or the CLOSE-WAIT state."
            ],
            "::=": [
                "tcp",
                8
            ]
        }
    },
    "tcpCurrEstab": {
        "OBJECT-TYPE": {
            "SYNTAX": "Gauge",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of TCP connections for which the",
                "current state is either ESTABLISHED or CLOSE-",
                "WAIT."
            ],
            "::=": [
                "tcp",
                9
            ]
        }
    },
    "tcpInSegs": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The total number of segments received, including",
                "those received in error.  This count includes",
                "segments received on currently established",
                "connections."
            ],
            "::=": [
                "tcp",
                10
            ]
        }
    },
    "tcpOutSegs": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The total number of segments sent, including",
                "those on current connections but excluding those",
                "containing only retransmitted octets."
            ],
            "::=": [
                "tcp",
                11
            ]
        }
    },
    "tcpRetransSegs": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The total number of segments retransmitted - that",
                "is, the number of TCP segments transmitted",
                "containing one or more previously transmitted",
                "octets."
            ],
            "::=": [
                "tcp",
                12
            ]
        }
    },
    "tcpConnTable": {
        "OBJECT-TYPE": {
            "SYNTAX": [
                "SEQUENCE OF",
                "TcpConnEntry"
            ],
            "ACCESS": "not-accessible",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "A table containing TCP connection-specific",
                "information."
            ],
            "::=": [
                "tcp",
                13
            ]
        }
    },
    "tcpConnEntry": {
        "OBJECT-TYPE": {
            "SYNTAX": "TcpConnEntry",
            "ACCESS": "not-accessible",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "Information about a particular current TCP",
                "connection.  An object of this type is transient,",
                "in that it ceases to exist when (or soon after)",
                "the connection makes the transition to the CLOSED",
                "state."
            ],
            "INDEX": [
                "tcpConnLocalAddress",
                "tcpConnLocalPort",
                "tcpConnRemAddress",
                "tcpConnRemPort"
            ],
            "::=": [
                "tcpConnTable",
                1
            ]
        }
    },
    "TcpConnEntry": {
        "SEQUENCE": [
            [
                "tcpConnState",
                "INTEGER"
            ],
            [
                "tcpConnLocalAddress",
                "IpAddress"
            ],
            [
                "tcpConnLocalPort",
                [
                    "INTEGER",
                    {
                        "min": 0,
                        "max": 65535
                    }
                ]
            ],
            [
                "tcpConnRemAddress",
                "IpAddress"
            ],
            [
                "tcpConnRemPort",
                [
                    "INTEGER",
                    {
                        "min": 0,
                        "max": 65535
                    }
                ]
            ]
        ]
    },
    "tcpConnState": {
        "OBJECT-TYPE": {
            "SYNTAX": [
                "INTEGER",
                {
                    "1": "closed",
                    "2": "listen",
                    "3": "synSent",
                    "4": "synReceived",
                    "5": "established",
                    "6": "finWait1",
                    "7": "finWait2",
                    "8": "closeWait",
                    "9": "lastAck",
                    "10": "closing",
                    "11": "timeWait",
                    "12": "deleteTCB"
                }
            ],
            "ACCESS": "read-write",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The state of this TCP connection.",
                "",
                "The only value which may be set by a management",
                "station is deleteTCB(12).  Accordingly, it is",
                "appropriate for an agent to return a `badValue'",
                "response if a management station attempts to set",
                "this object to any other value.",
                "",
                "If a management station sets this object to the",
                "value deleteTCB(12), then this has the effect of",
                "deleting the TCB (as defined in RFC 793) of the",
                "corresponding connection on the managed node,",
                "resulting in immediate termination of the",
                "connection.",
                "",
                "As an implementation-specific option, a RST",
                "",
                "segment may be sent from the managed node to the",
                "other TCP endpoint (note however that RST segments",
                "are not sent reliably)."
            ],
            "::=": [
                "tcpConnEntry",
                1
            ]
        }
    },
    "tcpConnLocalAddress": {
        "OBJECT-TYPE": {
            "SYNTAX": "IpAddress",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The local IP address for this TCP connection.  In",
                "the case of a connection in the listen state which",
                "is willing to accept connections for any IP",
                "interface associated with the node, the value",
                "0.0.0.0 is used."
            ],
            "::=": [
                "tcpConnEntry",
                2
            ]
        }
    },
    "tcpConnLocalPort": {
        "OBJECT-TYPE": {
            "SYNTAX": [
                "INTEGER",
                {
                    "min": 0,
                    "max": 65535
                }
            ],
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The local port number for this TCP connection."
            ],
            "::=": [
                "tcpConnEntry",
                3
            ]
        }
    },
    "tcpConnRemAddress": {
        "OBJECT-TYPE": {
            "SYNTAX": "IpAddress",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The remote IP address for this TCP connection."
            ],
            "::=": [
                "tcpConnEntry",
                4
            ]
        }
    },
    "tcpConnRemPort": {
        "OBJECT-TYPE": {
            "SYNTAX": [
                "INTEGER",
                {
                    "min": 0,
                    "max": 65535
                }
            ],
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The remote port number for this TCP connection."
            ],
            "::=": [
                "tcpConnEntry",
                5
            ]
        }
    },
    "tcpInErrs": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The total number of segments received in error",
                "(e.g., bad TCP checksums)."
            ],
            "::=": [
                "tcp",
                14
            ]
        }
    },
    "tcpOutRsts": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of TCP segments sent containing the",
                "RST flag."
            ],
            "::=": [
                "tcp",
                15
            ]
        }
    },
    "udpInDatagrams": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The total number of UDP datagrams delivered to",
                "UDP users."
            ],
            "::=": [
                "udp",
                1
            ]
        }
    },
    "udpNoPorts": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The total number of received UDP datagrams for",
                "which there was no application at the destination",
                "port."
            ],
            "::=": [
                "udp",
                2
            ]
        }
    },
    "udpInErrors": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of received UDP datagrams that could",
                "not be delivered for reasons other than the lack",
                "of an application at the destination port."
            ],
            "::=": [
                "udp",
                3
            ]
        }
    },
    "udpOutDatagrams": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The total number of UDP datagrams sent from this",
                "entity."
            ],
            "::=": [
                "udp",
                4
            ]
        }
    },
    "udpTable": {
        "OBJECT-TYPE": {
            "SYNTAX": [
                "SEQUENCE OF",
                "UdpEntry"
            ],
            "ACCESS": "not-accessible",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "A table containing UDP listener information."
            ],
            "::=": [
                "udp",
                5
            ]
        }
    },
    "udpEntry": {
        "OBJECT-TYPE": {
            "SYNTAX": "UdpEntry",
            "ACCESS": "not-accessible",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "Information about a particular current UDP",
                "listener."
            ],
            "INDEX": [
                "udpLocalAddress",
                "udpLocalPort"
            ],
            "::=": [
                "udpTable",
                1
            ]
        }
    },
    "UdpEntry": {
        "SEQUENCE": [
            [
                "udpLocalAddress",
                "IpAddress"
            ],
            [
                "udpLocalPort",
                [
                    "INTEGER",
                    {
                        "min": 0,
                        "max": 65535
                    }
                ]
            ]
        ]
    },
    "udpLocalAddress": {
        "OBJECT-TYPE": {
            "SYNTAX": "IpAddress",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The local IP address for this UDP listener.  In",
                "",
                "the case of a UDP listener which is willing to",
                "accept datagrams for any IP interface associated",
                "with the node, the value 0.0.0.0 is used."
            ],
            "::=": [
                "udpEntry",
                1
            ]
        }
    },
    "udpLocalPort": {
        "OBJECT-TYPE": {
            "SYNTAX": [
                "INTEGER",
                {
                    "min": 0,
                    "max": 65535
                }
            ],
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The local port number for this UDP listener."
            ],
            "::=": [
                "udpEntry",
                2
            ]
        }
    },
    "egpInMsgs": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of EGP messages received without",
                "error."
            ],
            "::=": [
                "egp",
                1
            ]
        }
    },
    "egpInErrors": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of EGP messages received that proved",
                "to be in error."
            ],
            "::=": [
                "egp",
                2
            ]
        }
    },
    "egpOutMsgs": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The total number of locally generated EGP",
                "messages."
            ],
            "::=": [
                "egp",
                3
            ]
        }
    },
    "egpOutErrors": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of locally generated EGP messages not",
                "sent due to resource limitations within an EGP",
                "entity."
            ],
            "::=": [
                "egp",
                4
            ]
        }
    },
    "egpNeighTable": {
        "OBJECT-TYPE": {
            "SYNTAX": [
                "SEQUENCE OF",
                "EgpNeighEntry"
            ],
            "ACCESS": "not-accessible",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The EGP neighbor table."
            ],
            "::=": [
                "egp",
                5
            ]
        }
    },
    "egpNeighEntry": {
        "OBJECT-TYPE": {
            "SYNTAX": "EgpNeighEntry",
            "ACCESS": "not-accessible",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "Information about this entity's relationship with",
                "a particular EGP neighbor."
            ],
            "INDEX": "egpNeighAddr",
            "::=": [
                "egpNeighTable",
                1
            ]
        }
    },
    "EgpNeighEntry": {
        "SEQUENCE": [
            [
                "egpNeighState",
                "INTEGER"
            ],
            [
                "egpNeighAddr",
                "IpAddress"
            ],
            [
                "egpNeighAs",
                "INTEGER"
            ],
            [
                "egpNeighInMsgs",
                "Counter"
            ],
            [
                "egpNeighInErrs",
                "Counter"
            ],
            [
                "egpNeighOutMsgs",
                "Counter"
            ],
            [
                "egpNeighOutErrs",
                "Counter"
            ],
            [
                "egpNeighInErrMsgs",
                "Counter"
            ],
            [
                "egpNeighOutErrMsgs",
                "Counter"
            ],
            [
                "egpNeighStateUps",
                "Counter"
            ],
            [
                "egpNeighStateDowns",
                "Counter"
            ],
            [
                "egpNeighIntervalHello",
                "INTEGER"
            ],
            [
                "egpNeighIntervalPoll",
                "INTEGER"
            ],
            [
                "egpNeighMode",
                "INTEGER"
            ],
            [
                "egpNeighEventTrigger",
                "INTEGER"
            ]
        ]
    },
    "egpNeighState": {
        "OBJECT-TYPE": {
            "SYNTAX": [
                "INTEGER",
                {
                    "1": "idle",
                    "2": "acquisition",
                    "3": "down",
                    "4": "up",
                    "5": "cease"
                }
            ],
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The EGP state of the local system with respect to",
                "this entry's EGP neighbor.  Each EGP state is",
                "represented by a value that is one greater than",
                "the numerical value associated with said state in",
                "RFC 904."
            ],
            "::=": [
                "egpNeighEntry",
                1
            ]
        }
    },
    "egpNeighAddr": {
        "OBJECT-TYPE": {
            "SYNTAX": "IpAddress",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The IP address of this entry's EGP neighbor."
            ],
            "::=": [
                "egpNeighEntry",
                2
            ]
        }
    },
    "egpNeighAs": {
        "OBJECT-TYPE": {
            "SYNTAX": "INTEGER",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The autonomous system of this EGP peer.  Zero",
                "should be specified if the autonomous system",
                "number of the neighbor is not yet known."
            ],
            "::=": [
                "egpNeighEntry",
                3
            ]
        }
    },
    "egpNeighInMsgs": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of EGP messages received without error",
                "from this EGP peer."
            ],
            "::=": [
                "egpNeighEntry",
                4
            ]
        }
    },
    "egpNeighInErrs": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of EGP messages received from this EGP",
                "peer that proved to be in error (e.g., bad EGP",
                "checksum)."
            ],
            "::=": [
                "egpNeighEntry",
                5
            ]
        }
    },
    "egpNeighOutMsgs": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of locally generated EGP messages to",
                "this EGP peer."
            ],
            "::=": [
                "egpNeighEntry",
                6
            ]
        }
    },
    "egpNeighOutErrs": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of locally generated EGP messages not",
                "sent to this EGP peer due to resource limitations",
                "within an EGP entity."
            ],
            "::=": [
                "egpNeighEntry",
                7
            ]
        }
    },
    "egpNeighInErrMsgs": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of EGP-defined error messages received",
                "from this EGP peer."
            ],
            "::=": [
                "egpNeighEntry",
                8
            ]
        }
    },
    "egpNeighOutErrMsgs": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of EGP-defined error messages sent to",
                "this EGP peer."
            ],
            "::=": [
                "egpNeighEntry",
                9
            ]
        }
    },
    "egpNeighStateUps": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of EGP state transitions to the UP",
                "state with this EGP peer."
            ],
            "::=": [
                "egpNeighEntry",
                10
            ]
        }
    },
    "egpNeighStateDowns": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of EGP state transitions from the UP",
                "state to any other state with this EGP peer."
            ],
            "::=": [
                "egpNeighEntry",
                11
            ]
        }
    },
    "egpNeighIntervalHello": {
        "OBJECT-TYPE": {
            "SYNTAX": "INTEGER",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The interval between EGP Hello command",
                "retransmissions (in hundredths of a second).  This",
                "represents the t1 timer as defined in RFC 904."
            ],
            "::=": [
                "egpNeighEntry",
                12
            ]
        }
    },
    "egpNeighIntervalPoll": {
        "OBJECT-TYPE": {
            "SYNTAX": "INTEGER",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The interval between EGP poll command",
                "",
                "retransmissions (in hundredths of a second).  This",
                "represents the t3 timer as defined in RFC 904."
            ],
            "::=": [
                "egpNeighEntry",
                13
            ]
        }
    },
    "egpNeighMode": {
        "OBJECT-TYPE": {
            "SYNTAX": [
                "INTEGER",
                {
                    "1": "active",
                    "2": "passive"
                }
            ],
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The polling mode of this EGP entity, either",
                "passive or active."
            ],
            "::=": [
                "egpNeighEntry",
                14
            ]
        }
    },
    "egpNeighEventTrigger": {
        "OBJECT-TYPE": {
            "SYNTAX": [
                "INTEGER",
                {
                    "1": "start",
                    "2": "stop"
                }
            ],
            "ACCESS": "read-write",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "A control variable used to trigger operator-",
                "initiated Start and Stop events.  When read, this",
                "variable always returns the most recent value that",
                "egpNeighEventTrigger was set to.  If it has not",
                "been set since the last initialization of the",
                "network management subsystem on the node, it",
                "returns a value of `stop'.",
                "",
                "When set, this variable causes a Start or Stop",
                "event on the specified neighbor, as specified on",
                "pages 8-10 of RFC 904.  Briefly, a Start event",
                "causes an Idle peer to begin neighbor acquisition",
                "and a non-Idle peer to reinitiate neighbor",
                "acquisition.  A stop event causes a non-Idle peer",
                "to return to the Idle state until a Start event",
                "occurs, either via egpNeighEventTrigger or",
                "otherwise."
            ],
            "::=": [
                "egpNeighEntry",
                15
            ]
        }
    },
    "egpAs": {
        "OBJECT-TYPE": {
            "SYNTAX": "INTEGER",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The autonomous system number of this EGP entity."
            ],
            "::=": [
                "egp",
                6
            ]
        }
    },
    "snmpInPkts": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter32",
            "MAX-ACCESS": "read-only",
            "STATUS": "current",
            "DESCRIPTION": [
                "The total number of messages delivered to the SNMP",
                "entity from the transport service."
            ],
            "::=": [
                "snmp",
                1
            ]
        }
    },
    "snmpOutPkts": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter32",
            "MAX-ACCESS": "read-only",
            "STATUS": "obsolete",
            "DESCRIPTION": [
                "The total number of SNMP Messages which were",
                "passed from the SNMP protocol entity to the",
                "transport service."
            ],
            "::=": [
                "snmp",
                2
            ]
        }
    },
    "snmpInBadVersions": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter32",
            "MAX-ACCESS": "read-only",
            "STATUS": "current",
            "DESCRIPTION": [
                "The total number of SNMP messages which were delivered",
                "to the SNMP entity and were for an unsupported SNMP",
                "version."
            ],
            "::=": [
                "snmp",
                3
            ]
        }
    },
    "snmpInBadCommunityNames": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter32",
            "MAX-ACCESS": "read-only",
            "STATUS": "current",
            "DESCRIPTION": [
                "The total number of community-based SNMP messages (for",
                "example,  SNMPv1) delivered to the SNMP entity which",
                "used an SNMP community name not known to said entity.",
                "Also, implementations which authenticate community-based",
                "SNMP messages using check(s) in addition to matching",
                "the community name (for example, by also checking",
                "whether the message originated from a transport address",
                "allowed to use a specified community name) MAY include",
                "in this value the number of messages which failed the",
                "additional check(s).  It is strongly RECOMMENDED that",
                "",
                "the documentation for any security model which is used",
                "to authenticate community-based SNMP messages specify",
                "the precise conditions that contribute to this value."
            ],
            "::=": [
                "snmp",
                4
            ]
        }
    },
    "snmpInBadCommunityUses": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter32",
            "MAX-ACCESS": "read-only",
            "STATUS": "current",
            "DESCRIPTION": [
                "The total number of community-based SNMP messages (for",
                "example, SNMPv1) delivered to the SNMP entity which",
                "represented an SNMP operation that was not allowed for",
                "the SNMP community named in the message.  The precise",
                "conditions under which this counter is incremented",
                "(if at all) depend on how the SNMP entity implements",
                "its access control mechanism and how its applications",
                "interact with that access control mechanism.  It is",
                "strongly RECOMMENDED that the documentation for any",
                "access control mechanism which is used to control access",
                "to and visibility of MIB instrumentation specify the",
                "precise conditions that contribute to this value."
            ],
            "::=": [
                "snmp",
                5
            ]
        }
    },
    "snmpInASNParseErrs": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter32",
            "MAX-ACCESS": "read-only",
            "STATUS": "current",
            "DESCRIPTION": [
                "The total number of ASN.1 or BER errors encountered by",
                "the SNMP entity when decoding received SNMP messages."
            ],
            "::=": [
                "snmp",
                6
            ]
        }
    },
    "snmpInBadTypes": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "::=": [
                "snmp",
                7
            ]
        }
    },
    "snmpInTooBigs": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter32",
            "MAX-ACCESS": "read-only",
            "STATUS": "obsolete",
            "DESCRIPTION": [
                "The total number of SNMP PDUs which were",
                "delivered to the SNMP protocol entity and for",
                "which the value of the error-status field was",
                "`tooBig'."
            ],
            "::=": [
                "snmp",
                8
            ]
        }
    },
    "snmpInNoSuchNames": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter32",
            "MAX-ACCESS": "read-only",
            "STATUS": "obsolete",
            "DESCRIPTION": [
                "The total number of SNMP PDUs which were",
                "delivered to the SNMP protocol entity and for",
                "which the value of the error-status field was",
                "`noSuchName'."
            ],
            "::=": [
                "snmp",
                9
            ]
        }
    },
    "snmpInBadValues": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter32",
            "MAX-ACCESS": "read-only",
            "STATUS": "obsolete",
            "DESCRIPTION": [
                "The total number of SNMP PDUs which were",
                "delivered to the SNMP protocol entity and for",
                "which the value of the error-status field was",
                "`badValue'."
            ],
            "::=": [
                "snmp",
                10
            ]
        }
    },
    "snmpInReadOnlys": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter32",
            "MAX-ACCESS": "read-only",
            "STATUS": "obsolete",
            "DESCRIPTION": [
                "The total number valid SNMP PDUs which were delivered",
                "to the SNMP protocol entity and for which the value",
                "of the error-status field was `readOnly'.  It should",
                "be noted that it is a protocol error to generate an",
                "SNMP PDU which contains the value `readOnly' in the",
                "error-status field, as such this object is provided",
                "as a means of detecting incorrect implementations of",
                "the SNMP."
            ],
            "::=": [
                "snmp",
                11
            ]
        }
    },
    "snmpInGenErrs": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter32",
            "MAX-ACCESS": "read-only",
            "STATUS": "obsolete",
            "DESCRIPTION": [
                "The total number of SNMP PDUs which were delivered",
                "to the SNMP protocol entity and for which the value",
                "of the error-status field was `genErr'."
            ],
            "::=": [
                "snmp",
                12
            ]
        }
    },
    "snmpInTotalReqVars": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter32",
            "MAX-ACCESS": "read-only",
            "STATUS": "obsolete",
            "DESCRIPTION": [
                "The total number of MIB objects which have been",
                "retrieved successfully by the SNMP protocol entity",
                "as the result of receiving valid SNMP Get-Request",
                "and Get-Next PDUs."
            ],
            "::=": [
                "snmp",
                13
            ]
        }
    },
    "snmpInTotalSetVars": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter32",
            "MAX-ACCESS": "read-only",
            "STATUS": "obsolete",
            "DESCRIPTION": [
                "The total number of MIB objects which have been",
                "altered successfully by the SNMP protocol entity as",
                "the result of receiving valid SNMP Set-Request PDUs."
            ],
            "::=": [
                "snmp",
                14
            ]
        }
    },
    "snmpInGetRequests": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter32",
            "MAX-ACCESS": "read-only",
            "STATUS": "obsolete",
            "DESCRIPTION": [
                "The total number of SNMP Get-Request PDUs which",
                "have been accepted and processed by the SNMP",
                "protocol entity."
            ],
            "::=": [
                "snmp",
                15
            ]
        }
    },
    "snmpInGetNexts": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter32",
            "MAX-ACCESS": "read-only",
            "STATUS": "obsolete",
            "DESCRIPTION": [
                "The total number of SNMP Get-Next PDUs which have been",
                "accepted and processed by the SNMP protocol entity."
            ],
            "::=": [
                "snmp",
                16
            ]
        }
    },
    "snmpInSetRequests": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter32",
            "MAX-ACCESS": "read-only",
            "STATUS": "obsolete",
            "DESCRIPTION": [
                "The total number of SNMP Set-Request PDUs which",
                "have been accepted and processed by the SNMP protocol",
                "entity."
            ],
            "::=": [
                "snmp",
                17
            ]
        }
    },
    "snmpInGetResponses": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter32",
            "MAX-ACCESS": "read-only",
            "STATUS": "obsolete",
            "DESCRIPTION": [
                "The total number of SNMP Get-Response PDUs which",
                "have been accepted and processed by the SNMP protocol",
                "entity."
            ],
            "::=": [
                "snmp",
                18
            ]
        }
    },
    "snmpInTraps": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter32",
            "MAX-ACCESS": "read-only",
            "STATUS": "obsolete",
            "DESCRIPTION": [
                "The total number of SNMP Trap PDUs which have been",
                "accepted and processed by the SNMP protocol entity."
            ],
            "::=": [
                "snmp",
                19
            ]
        }
    },
    "snmpOutTooBigs": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter32",
            "MAX-ACCESS": "read-only",
            "STATUS": "obsolete",
            "DESCRIPTION": [
                "The total number of SNMP PDUs which were generated",
                "by the SNMP protocol entity and for which the value",
                "of the error-status field was `tooBig.'"
            ],
            "::=": [
                "snmp",
                20
            ]
        }
    },
    "snmpOutNoSuchNames": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter32",
            "MAX-ACCESS": "read-only",
            "STATUS": "obsolete",
            "DESCRIPTION": [
                "The total number of SNMP PDUs which were generated",
                "by the SNMP protocol entity and for which the value",
                "of the error-status was `noSuchName'."
            ],
            "::=": [
                "snmp",
                21
            ]
        }
    },
    "snmpOutBadValues": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter32",
            "MAX-ACCESS": "read-only",
            "STATUS": "obsolete",
            "DESCRIPTION": [
                "The total number of SNMP PDUs which were generated",
                "by the SNMP protocol entity and for which the value",
                "of the error-status field was `badValue'."
            ],
            "::=": [
                "snmp",
                22
            ]
        }
    },
    "snmpOutReadOnlys": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "::=": [
                "snmp",
                23
            ]
        }
    },
    "snmpOutGenErrs": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter32",
            "MAX-ACCESS": "read-only",
            "STATUS": "obsolete",
            "DESCRIPTION": [
                "The total number of SNMP PDUs which were generated",
                "by the SNMP protocol entity and for which the value",
                "of the error-status field was `genErr'."
            ],
            "::=": [
                "snmp",
                24
            ]
        }
    },
    "snmpOutGetRequests": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter32",
            "MAX-ACCESS": "read-only",
            "STATUS": "obsolete",
            "DESCRIPTION": [
                "The total number of SNMP Get-Request PDUs which",
                "have been generated by the SNMP protocol entity."
            ],
            "::=": [
                "snmp",
                25
            ]
        }
    },
    "snmpOutGetNexts": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter32",
            "MAX-ACCESS": "read-only",
            "STATUS": "obsolete",
            "DESCRIPTION": [
                "The total number of SNMP Get-Next PDUs which have",
                "been generated by the SNMP protocol entity."
            ],
            "::=": [
                "snmp",
                26
            ]
        }
    },
    "snmpOutSetRequests": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter32",
            "MAX-ACCESS": "read-only",
            "STATUS": "obsolete",
            "DESCRIPTION": [
                "The total number of SNMP Set-Request PDUs which",
                "have been generated by the SNMP protocol entity."
            ],
            "::=": [
                "snmp",
                27
            ]
        }
    },
    "snmpOutGetResponses": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter32",
            "MAX-ACCESS": "read-only",
            "STATUS": "obsolete",
            "DESCRIPTION": [
                "The total number of SNMP Get-Response PDUs which",
                "have been generated by the SNMP protocol entity."
            ],
            "::=": [
                "snmp",
                28
            ]
        }
    },
    "snmpOutTraps": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter32",
            "MAX-ACCESS": "read-only",
            "STATUS": "obsolete",
            "DESCRIPTION": [
                "The total number of SNMP Trap PDUs which have",
                "been generated by the SNMP protocol entity."
            ],
            "::=": [
                "snmp",
                29
            ]
        }
    },
    "snmpEnableAuthTraps": {
        "OBJECT-TYPE": {
            "SYNTAX": [
                "INTEGER",
                {
                    "1": "enabled",
                    "2": "disabled"
                }
            ],
            "ACCESS": "read-write",
            "STATUS": "mandatory",
            "::=": [
                "snmp",
                30
            ]
        }
    },
    "IndexSyntax": {
        "CHOICE": [
            [
                "number",
                [
                    "INTEGER",
                    {
                        "min": 0,
                        "max": "MAX"
                    }
                ]
            ],
            [
                "string",
                "OCTET STRING"
            ],
            [
                "object",
                "OBJECT IDENTIFIER"
            ],
            [
                "address",
                "NetworkAddress"
            ],
            [
                "ipAddress",
                "IpAddress"
            ]
        ]
    },
    "PhysAddress": {
        "TEXTUAL-CONVENTION": {
            "DISPLAY-HINT": [
                "1x:"
            ],
            "STATUS": "current",
            "DESCRIPTION": [
                "Represents media- or physical-level addresses."
            ],
            "SYNTAX": "OCTET STRING"
        }
    },
    "ipRouteTable": {
        "OBJECT-TYPE": {
            "SYNTAX": [
                "SEQUENCE OF",
                "IpRouteEntry"
            ],
            "ACCESS": "not-accessible",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "This entity's IP Routing table."
            ],
            "::=": [
                "ip",
                21
            ]
        }
    },
    "ipRouteMetric5": {
        "OBJECT-TYPE": {
            "SYNTAX": "INTEGER",
            "ACCESS": "read-write",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "An alternate routing metric for this route.  The",
                "semantics of this metric are determined by the",
                "routing-protocol specified in the route's",
                "ipRouteProto value.  If this metric is not used,",
                "its value should be set to -1."
            ],
            "::=": [
                "ipRouteEntry",
                12
            ]
        }
    },
    "ipRouteInfo": {
        "OBJECT-TYPE": {
            "SYNTAX": "OBJECT IDENTIFIER",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "A reference to MIB definitions specific to the",
                "particular routing protocol which is responsible",
                "for this route, as determined by the value",
                "specified in the route's ipRouteProto value.  If",
                "this information is not present, its value should",
                "be set to the OBJECT IDENTIFIER { 0 0 }, which is",
                "a syntatically valid object identifier, and any",
                "conformant implementation of ASN.1 and BER must be",
                "able to generate and recognize this value."
            ],
            "::=": [
                "ipRouteEntry",
                13
            ]
        }
    },
    "ipRoutingDiscards": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter",
            "ACCESS": "read-only",
            "STATUS": "mandatory",
            "DESCRIPTION": [
                "The number of routing entries which were chosen",
                "to be discarded even though they are valid.  One",
                "possible reason for discarding such an entry could",
                "be to free-up buffer space for other routing",
                "",
                "entries."
            ],
            "::=": [
                "ip",
                23
            ]
        }
    },
    "snmpEnableAuthenTraps": {
        "OBJECT-TYPE": {
            "SYNTAX": [
                "INTEGER",
                {
                    "1": "enabled",
                    "2": "disabled"
                }
            ],
            "MAX-ACCESS": "read-write",
            "STATUS": "current",
            "DESCRIPTION": [
                "Indicates whether the SNMP entity is permitted to",
                "generate authenticationFailure traps.  The value of this",
                "object overrides any configuration information; as such,",
                "it provides a means whereby all authenticationFailure",
                "traps may be disabled.",
                "",
                "Note that it is strongly recommended that this object",
                "be stored in non-volatile memory so that it remains",
                "constant across re-initializations of the network",
                "management system."
            ],
            "::=": [
                "snmp",
                30
            ]
        }
    },
    "org": {
        "OBJECT IDENTIFIER": {
            "::=": [
                "iso",
                3
            ]
        }
    },
    "dod": {
        "OBJECT IDENTIFIER": {
            "::=": [
                "org",
                6
            ]
        }
    },
    "security": {
        "OBJECT IDENTIFIER": {
            "::=": [
                "internet",
                5
            ]
        }
    },
    "snmpV2": {
        "OBJECT IDENTIFIER": {
            "::=": [
                "internet",
                6
            ]
        }
    },
    "snmpDomains": {
        "OBJECT IDENTIFIER": {
            "::=": [
                "snmpV2",
                1
            ]
        }
    },
    "snmpProxys": {
        "OBJECT IDENTIFIER": {
            "::=": [
                "snmpV2",
                2
            ]
        }
    },
    "snmpModules": {
        "OBJECT IDENTIFIER": {
            "::=": [
                "snmpV2",
                3
            ]
        }
    },
    "MODULE-IDENTITY": {
        "TYPE NOTATION": {},
        "VALUE NOTATION": {}
    },
    "OBJECT-IDENTITY": {
        "TYPE NOTATION": {},
        "VALUE NOTATION": {}
    },
    "NotificationName": "OBJECT IDENTIFIER",
    "Integer32": {
        "tag": {
            "class": "UNIVERSAL",
            "number": 2
        },
        "definition": "IMPLICIT",
        "type": [
            "INTEGER",
            {
                "min": -2147483648,
                "max": 2147483647
            }
        ]
    },
    "Counter32": {
        "tag": {
            "class": "APPLICATION",
            "number": 1
        },
        "definition": "IMPLICIT",
        "type": [
            "INTEGER",
            {
                "min": 0,
                "max": 4294967295
            }
        ]
    },
    "Gauge32": {
        "tag": {
            "class": "APPLICATION",
            "number": 2
        },
        "definition": "IMPLICIT",
        "type": [
            "INTEGER",
            {
                "min": 0,
                "max": 4294967295
            }
        ]
    },
    "Unsigned32": {
        "tag": {
            "class": "APPLICATION",
            "number": 2
        },
        "definition": "IMPLICIT",
        "type": [
            "INTEGER",
            {
                "min": 0,
                "max": 4294967295
            }
        ]
    },
    "Counter64": {
        "tag": {
            "class": "APPLICATION",
            "number": 6
        },
        "definition": "IMPLICIT",
        "type": [
            "INTEGER",
            {
                "min": 0,
                "max": 18446744073709552000
            }
        ]
    },
    "NOTIFICATION-TYPE": {
        "TYPE NOTATION": {},
        "VALUE NOTATION": {}
    },
    "zeroDotZero": {
        "OBJECT-IDENTITY": {
            "STATUS": "current",
            "DESCRIPTION": [
                "A value used for null identifiers."
            ],
            "::=": [
                0,
                0
            ]
        }
    },
    "OBJECT-GROUP": {
        "TYPE NOTATION": {},
        "VALUE NOTATION": {}
    },
    "NOTIFICATION-GROUP": {
        "TYPE NOTATION": {},
        "VALUE NOTATION": {}
    },
    "MODULE-COMPLIANCE": {
        "TYPE NOTATION": {},
        "VALUE NOTATION": {}
    },
    "AGENT-CAPABILITIES": {
        "TYPE NOTATION": {},
        "VALUE NOTATION": {}
    },
    "TEXTUAL-CONVENTION": {
        "TYPE NOTATION": {},
        "VALUE NOTATION": {}
    },
    "MacAddress": {
        "TEXTUAL-CONVENTION": {
            "DISPLAY-HINT": [
                "1x:"
            ],
            "STATUS": "current",
            "DESCRIPTION": [
                "Represents an 802 MAC address represented in the",
                "`canonical' order defined by IEEE 802.1a, i.e., as if it",
                "were transmitted least significant bit first, even though",
                "802.5 (in contrast to other 802.x protocols) requires MAC",
                "addresses to be transmitted most significant bit first."
            ],
            "SYNTAX": [
                "OCTET STRING",
                {
                    "SIZE": 6
                }
            ]
        }
    },
    "TruthValue": {
        "TEXTUAL-CONVENTION": {
            "STATUS": "current",
            "DESCRIPTION": [
                "Represents a boolean value."
            ],
            "SYNTAX": [
                "INTEGER",
                {
                    "1": "true",
                    "2": "false"
                }
            ]
        }
    },
    "TestAndIncr": {
        "TEXTUAL-CONVENTION": {
            "STATUS": "current",
            "DESCRIPTION": [
                "Represents integer-valued information used for atomic",
                "operations.  When the management protocol is used to specify",
                "that an object instance having this syntax is to be",
                "modified, the new value supplied via the management protocol",
                "must precisely match the value presently held by the",
                "instance.  If not, the management protocol set operation",
                "fails with an error of `inconsistentValue'.  Otherwise, if",
                "the current value is the maximum value of 2^31-1 (2147483647",
                "decimal), then the value held by the instance is wrapped to",
                "zero; otherwise, the value held by the instance is",
                "incremented by one.  (Note that regardless of whether the",
                "management protocol set operation succeeds, the variable-",
                "binding in the request and response PDUs are identical.)",
                "",
                "The value of the ACCESS clause for objects having this syntax is either `read-write' or `read-create'. When an instance of a columnar object having this syntax is created, any value may be supplied via the management protocol.",
                "",
                "When the network management portion of the system is re- initialized, the value of every object instance having this syntax must either be incremented from its value prior to the re-initialization, or (if the value prior to the re- initialization is unknown) be set to a pseudo-randomly generated value."
            ],
            "SYNTAX": [
                "INTEGER",
                {
                    "min": 0,
                    "max": 2147483647
                }
            ]
        }
    },
    "AutonomousType": {
        "TEXTUAL-CONVENTION": {
            "STATUS": "current",
            "DESCRIPTION": [
                "Represents an independently extensible type identification",
                "value.  It may, for example, indicate a particular sub-tree",
                "with further MIB definitions, or define a particular type of",
                "protocol or hardware."
            ],
            "SYNTAX": "OBJECT IDENTIFIER"
        }
    },
    "InstancePointer": {
        "TEXTUAL-CONVENTION": {
            "STATUS": "obsolete",
            "DESCRIPTION": [
                "A pointer to either a specific instance of a MIB object or",
                "a conceptual row of a MIB table in the managed device.  In",
                "the latter case, by convention, it is the name of the",
                "particular instance of the first accessible columnar object",
                "in the conceptual row.",
                "",
                "The two uses of this textual convention are replaced by VariablePointer and RowPointer, respectively."
            ],
            "SYNTAX": "OBJECT IDENTIFIER"
        }
    },
    "VariablePointer": {
        "TEXTUAL-CONVENTION": {
            "STATUS": "current",
            "DESCRIPTION": [
                "A pointer to a specific object instance.  For example,",
                "sysContact.0 or ifInOctets.3."
            ],
            "SYNTAX": "OBJECT IDENTIFIER"
        }
    },
    "RowPointer": {
        "TEXTUAL-CONVENTION": {
            "STATUS": "current",
            "DESCRIPTION": [
                "Represents a pointer to a conceptual row.  The value is the",
                "name of the instance of the first accessible columnar object",
                "in the conceptual row.",
                "",
                "For example, ifIndex.3 would point to the 3rd row in the ifTable (note that if ifIndex were not-accessible, then ifDescr.3 would be used instead)."
            ],
            "SYNTAX": "OBJECT IDENTIFIER"
        }
    },
    "RowStatus": {
        "TEXTUAL-CONVENTION": {
            "STATUS": "current",
            "DESCRIPTION": [
                "The RowStatus textual convention is used to manage the",
                "",
                "creation and deletion of conceptual rows, and is used as the value of the SYNTAX clause for the status column of a conceptual row (as described in Section 7.7.1 of [2].)",
                "",
                "The status column has six defined values:",
                "",
                "- `active', which indicates that the conceptual row is",
                "available for use by the managed device;",
                "",
                "- `notInService', which indicates that the conceptual",
                "row exists in the agent, but is unavailable for use by",
                "the managed device (see NOTE below);",
                "",
                "- `notReady', which indicates that the conceptual row",
                "exists in the agent, but is missing information",
                "necessary in order to be available for use by the",
                "managed device;",
                "",
                "- `createAndGo', which is supplied by a management",
                "station wishing to create a new instance of a",
                "conceptual row and to have its status automatically set",
                "to active, making it available for use by the managed",
                "device;",
                "",
                "- `createAndWait', which is supplied by a management",
                "station wishing to create a new instance of a",
                "conceptual row (but not make it available for use by",
                "the managed device); and,",
                "",
                "- `destroy', which is supplied by a management station",
                "wishing to delete all of the instances associated with",
                "an existing conceptual row.",
                "",
                "Whereas five of the six values (all except `notReady') may be specified in a management protocol set operation, only three values will be returned in response to a management protocol retrieval operation: `notReady', `notInService' or `active'. That is, when queried, an existing conceptual row has only three states: it is either available for use by the managed device (the status column has value `active'); it is not available for use by the managed device, though the agent has sufficient information to make it so (the status column has value `notInService'); or, it is not available for use by the managed device, and an attempt to make it so would fail because the agent has insufficient information (the state column has value `notReady').",
                "",
                "NOTE WELL",
                "",
                "This textual convention may be used for a MIB table, irrespective of whether the values of that table's conceptual rows are able to be modified while it is active, or whether its conceptual rows must be taken out of service in order to be modified. That is, it is the responsibility of the DESCRIPTION clause of the status column to specify whether the status column must not be `active' in order for the value of some other column of the same conceptual row to be modified. If such a specification is made, affected columns may be changed by an SNMP set PDU if the RowStatus would not be equal to `active' either immediately before or after processing the PDU. In other words, if the PDU also contained a varbind that would change the RowStatus value, the column in question may be changed if the RowStatus was not equal to `active' as the PDU was received, or if the varbind sets the status to a value other than 'active'.",
                "",
                "Also note that whenever any elements of a row exist, the RowStatus column must also exist.",
                "",
                "To summarize the effect of having a conceptual row with a status column having a SYNTAX clause value of RowStatus, consider the following state diagram:",
                "",
                "STATE",
                "",
                "+-+-+-",
                "|      A       |     B     |      C      |      D",
                "|              |status col.|status column|",
                "|status column |    is     |      is     |status column",
                "ACTION    |does not exist|  notReady | notInService|  is active",
                "",
                "+set status    |noError    ->D|inconsist- |inconsistent-|inconsistent-",
                "column to     |       or     |   entValue|        Value|        Value",
                "createAndGo   |inconsistent- |           |             |",
                "|         Value|           |             |",
                "",
                "+set status    |noError  see 1|inconsist- |inconsistent-|inconsistent-",
                "column to     |       or     |   entValue|        Value|        Value",
                "createAndWait |wrongValue    |           |             |",
                "",
                "+set status    |inconsistent- |inconsist- |noError      |noError",
                "column to     |         Value|   entValue|             |",
                "active        |              |           |             |",
                "|              |     or    |             |",
                "|              |           |             |",
                "|              |see 2   ->D|          ->D|          ->D",
                "",
                "+set status    |inconsistent- |inconsist- |noError      |noError   ->C",
                "column to     |         Value|   entValue|             |",
                "notInService  |              |           |             |",
                "|              |     or    |             |      or",
                "|              |           |             |",
                "|              |see 3   ->C|          ->C|wrongValue",
                "",
                "+set status    |noError       |noError    |noError      |noError",
                "column to     |              |           |             |",
                "destroy       |           ->A|        ->A|          ->A|          ->A",
                "",
                "+set any other |see 4         |noError    |noError      |see 5",
                "column to some|              |           |             |",
                "value         |              |      see 1|          ->C|          ->D",
                "",
                "+",
                "(1) goto B or C, depending on information available to the agent.",
                "",
                "(2) if other variable bindings included in the same PDU, provide values for all columns which are missing but required, then return noError and goto D.",
                "",
                "(3) if other variable bindings included in the same PDU, provide values for all columns which are missing but required, then return noError and goto C.",
                "",
                "(4) at the discretion of the agent, the return value may be either:",
                "",
                "inconsistentName: because the agent does not choose to create such an instance when the corresponding RowStatus instance does not exist, or",
                "",
                "inconsistentValue: if the supplied value is inconsistent with the state of some other MIB object's value, or",
                "",
                "noError: because the agent chooses to create the instance.",
                "",
                "If noError is returned, then the instance of the status column must also be created, and the new state is B or C, depending on the information available to the agent. If inconsistentName or inconsistentValue is returned, the row remains in state A.",
                "",
                "(5) depending on the MIB definition for the column/table, either noError or inconsistentValue may be returned.",
                "",
                "NOTE: Other processing of the set request may result in a response other than noError being returned, e.g., wrongValue, noCreation, etc.",
                "",
                "Conceptual Row Creation",
                "",
                "There are four potential interactions when creating a conceptual row: selecting an instance-identifier which is not in use; creating the conceptual row; initializing any objects for which the agent does not supply a default; and, making the conceptual row available for use by the managed device.",
                "",
                "Interaction 1: Selecting an Instance-Identifier",
                "",
                "The algorithm used to select an instance-identifier varies for each conceptual row. In some cases, the instance- identifier is semantically significant, e.g., the destination address of a route, and a management station selects the instance-identifier according to the semantics.",
                "",
                "In other cases, the instance-identifier is used solely to distinguish conceptual rows, and a management station without specific knowledge of the conceptual row might examine the instances present in order to determine an unused instance-identifier. (This approach may be used, but it is often highly sub-optimal; however, it is also a questionable practice for a naive management station to attempt conceptual row creation.)",
                "",
                "Alternately, the MIB module which defines the conceptual row might provide one or more objects which provide assistance in determining an unused instance-identifier. For example, if the conceptual row is indexed by an integer-value, then an object having an integer-valued SYNTAX clause might be defined for such a purpose, allowing a management station to issue a management protocol retrieval operation. In order to avoid unnecessary collisions between competing management stations, `adjacent' retrievals of this object should be different.",
                "",
                "Finally, the management station could select a pseudo-random number to use as the index. In the event that this index was already in use and an inconsistentValue was returned in response to the management protocol set operation, the management station should simply select a new pseudo-random number and retry the operation.",
                "",
                "A MIB designer should choose between the two latter algorithms based on the size of the table (and therefore the efficiency of each algorithm). For tables in which a large number of entries are expected, it is recommended that a MIB object be defined that returns an acceptable index for creation. For tables with small numbers of entries, it is recommended that the latter pseudo-random index mechanism be used.",
                "",
                "Interaction 2: Creating the Conceptual Row",
                "",
                "Once an unused instance-identifier has been selected, the management station determines if it wishes to create and activate the conceptual row in one transaction or in a negotiated set of interactions.",
                "",
                "Interaction 2a: Creating and Activating the Conceptual Row",
                "",
                "The management station must first determine the column requirements, i.e., it must determine those columns for which it must or must not provide values. Depending on the complexity of the table and the management station's knowledge of the agent's capabilities, this determination can be made locally by the management station. Alternately, the management station issues a management protocol get operation to examine all columns in the conceptual row that it wishes to create. In response, for each column, there are three possible outcomes:",
                "",
                "- a value is returned, indicating that some other",
                "management station has already created this conceptual",
                "row.  We return to interaction 1.",
                "",
                "- the exception `noSuchInstance' is returned,",
                "indicating that the agent implements the object-type",
                "associated with this column, and that this column in at",
                "least one conceptual row would be accessible in the MIB",
                "view used by the retrieval were it to exist. For those",
                "columns to which the agent provides read-create access,",
                "the `noSuchInstance' exception tells the management",
                "station that it should supply a value for this column",
                "when the conceptual row is to be created.",
                "",
                "- the exception `noSuchObject' is returned, indicating",
                "that the agent does not implement the object-type",
                "associated with this column or that there is no",
                "conceptual row for which this column would be",
                "accessible in the MIB view used by the retrieval.  As",
                "such, the management station can not issue any",
                "management protocol set operations to create an",
                "instance of this column.",
                "",
                "Once the column requirements have been determined, a management protocol set operation is accordingly issued. This operation also sets the new instance of the status column to `createAndGo'.",
                "",
                "When the agent processes the set operation, it verifies that it has sufficient information to make the conceptual row available for use by the managed device. The information available to the agent is provided by two sources: the management protocol set operation which creates the conceptual row, and, implementation-specific defaults supplied by the agent (note that an agent must provide implementation-specific defaults for at least those objects which it implements as read-only). If there is sufficient information available, then the conceptual row is created, a `noError' response is returned, the status column is set to `active', and no further interactions are necessary (i.e., interactions 3 and 4 are skipped). If there is insufficient information, then the conceptual row is not created, and the set operation fails with an error of `inconsistentValue'. On this error, the management station can issue a management protocol retrieval operation to determine if this was because it failed to specify a value for a required column, or, because the selected instance of the status column already existed. In the latter case, we return to interaction 1. In the former case, the management station can re-issue the set operation with the additional information, or begin interaction 2 again using",
                "`createAndWait' in order to negotiate creation of the conceptual row.",
                "",
                "NOTE WELL",
                "",
                "Regardless of the method used to determine the column requirements, it is possible that the management station might deem a column necessary when, in fact, the agent will not allow that particular columnar instance to be created or written. In this case, the management protocol set operation will fail with an error such as `noCreation' or `notWritable'. In this case, the management station decides whether it needs to be able to set a value for that particular columnar instance. If not, the management station re-issues the management protocol set operation, but without setting a value for that particular columnar instance; otherwise, the management station aborts the row creation algorithm.",
                "",
                "Interaction 2b: Negotiating the Creation of the Conceptual Row",
                "",
                "The management station issues a management protocol set operation which sets the desired instance of the status",
                "",
                "column to `createAndWait'. If the agent is unwilling to process a request of this sort, the set operation fails with an error of `wrongValue'. (As a consequence, such an agent must be prepared to accept a single management protocol set operation, i.e., interaction 2a above, containing all of the columns indicated by its column requirements.) Otherwise, the conceptual row is created, a `noError' response is returned, and the status column is immediately set to either `notInService' or `notReady', depending on whether it has sufficient information to make the conceptual row available for use by the managed device. If there is sufficient information available, then the status column is set to `notInService'; otherwise, if there is insufficient information, then the status column is set to `notReady'. Regardless, we proceed to interaction 3.",
                "",
                "Interaction 3: Initializing non-defaulted Objects",
                "",
                "The management station must now determine the column requirements. It issues a management protocol get operation to examine all columns in the created conceptual row. In the response, for each column, there are three possible outcomes:",
                "",
                "- a value is returned, indicating that the agent",
                "implements the object-type associated with this column",
                "and had sufficient information to provide a value.  For",
                "those columns to which the agent provides read-create",
                "access (and for which the agent allows their values to",
                "be changed after their creation), a value return tells",
                "the management station that it may issue additional",
                "management protocol set operations, if it desires, in",
                "order to change the value associated with this column.",
                "",
                "- the exception `noSuchInstance' is returned,",
                "indicating that the agent implements the object-type",
                "associated with this column, and that this column in at",
                "least one conceptual row would be accessible in the MIB",
                "view used by the retrieval were it to exist. However,",
                "the agent does not have sufficient information to",
                "provide a value, and until a value is provided, the",
                "conceptual row may not be made available for use by the",
                "managed device.  For those columns to which the agent",
                "provides read-create access, the `noSuchInstance'",
                "exception tells the management station that it must",
                "issue additional management protocol set operations, in",
                "order to provide a value associated with this column.",
                "",
                "- the exception `noSuchObject' is returned, indicating",
                "that the agent does not implement the object-type",
                "associated with this column or that there is no",
                "conceptual row for which this column would be",
                "accessible in the MIB view used by the retrieval.  As",
                "such, the management station can not issue any",
                "management protocol set operations to create an",
                "instance of this column.",
                "",
                "If the value associated with the status column is `notReady', then the management station must first deal with all `noSuchInstance' columns, if any. Having done so, the value of the status column becomes `notInService', and we proceed to interaction 4.",
                "",
                "Interaction 4: Making the Conceptual Row Available",
                "",
                "Once the management station is satisfied with the values associated with the columns of the conceptual row, it issues a management protocol set operation to set the status column to `active'. If the agent has sufficient information to make the conceptual row available for use by the managed device, the management protocol set operation succeeds (a `noError' response is returned). Otherwise, the management protocol set operation fails with an error of",
                "`inconsistentValue'.",
                "",
                "NOTE WELL",
                "",
                "A conceptual row having a status column with value `notInService' or `notReady' is unavailable to the managed device. As such, it is possible for the managed device to create its own instances during the time between the management protocol set operation which sets the status column to `createAndWait' and the management protocol set operation which sets the status column to `active'. In this case, when the management protocol set operation is issued to set the status column to `active', the values held in the agent supersede those used by the managed device.",
                "",
                "If the management station is prevented from setting the status column to `active' (e.g., due to management station or network failure) the conceptual row will be left in the `notInService' or `notReady' state, consuming resources indefinitely. The agent must detect conceptual rows that have been in either state for an abnormally long period of",
                "",
                "time and remove them. It is the responsibility of the DESCRIPTION clause of the status column to indicate what an abnormally long period of time would be. This period of time should be long enough to allow for human response time (including `think time') between the creation of the conceptual row and the setting of the status to `active'. In the absense of such information in the DESCRIPTION clause, it is suggested that this period be approximately 5 minutes in length. This removal action applies not only to newly-created rows, but also to previously active rows which are set to, and left in, the notInService state for a prolonged period exceeding that which is considered normal for such a conceptual row.",
                "",
                "Conceptual Row Suspension",
                "",
                "When a conceptual row is `active', the management station may issue a management protocol set operation which sets the instance of the status column to `notInService'. If the agent is unwilling to do so, the set operation fails with an error of `wrongValue'. Otherwise, the conceptual row is taken out of service, and a `noError' response is returned. It is the responsibility of the DESCRIPTION clause of the status column to indicate under what circumstances the status column should be taken out of service (e.g., in order for the value of some other column of the same conceptual row to be modified).",
                "",
                "Conceptual Row Deletion",
                "",
                "For deletion of conceptual rows, a management protocol set operation is issued which sets the instance of the status column to `destroy'. This request may be made regardless of the current value of the status column (e.g., it is possible to delete conceptual rows which are either `notReady', `notInService' or `active'.) If the operation succeeds, then all instances associated with the conceptual row are immediately removed."
            ],
            "SYNTAX": [
                "INTEGER",
                {
                    "1": "active",
                    "2": "notInService",
                    "3": "notReady",
                    "4": "createAndGo",
                    "5": "createAndWait",
                    "6": "destroy"
                }
            ]
        }
    },
    "TimeStamp": {
        "TEXTUAL-CONVENTION": {
            "STATUS": "current",
            "DESCRIPTION": [
                "The value of the sysUpTime object at which a specific",
                "occurrence happened.  The specific occurrence must be",
                "defined in the description of any object defined using this",
                "type."
            ],
            "SYNTAX": "TimeTicks"
        }
    },
    "TimeInterval": {
        "TEXTUAL-CONVENTION": {
            "STATUS": "current",
            "DESCRIPTION": [
                "A period of time, measured in units of 0.01 seconds."
            ],
            "SYNTAX": [
                "INTEGER",
                {
                    "min": 0,
                    "max": 2147483647
                }
            ]
        }
    },
    "DateAndTime": {
        "TEXTUAL-CONVENTION": {
            "DISPLAY-HINT": [
                "2d-1d-1d,1d:1d:1d.1d,1a1d:1d"
            ],
            "STATUS": "current",
            "DESCRIPTION": [
                "A date-time specification.",
                "",
                "field  octets  contents                  range",
                "-                1      1-2   year                      0..65536",
                "2       3    month                     1..12",
                "3       4    day                       1..31",
                "4       5    hour                      0..23",
                "5       6    minutes                   0..59",
                "6       7    seconds                   0..60",
                "(use 60 for leap-second)",
                "7       8    deci-seconds              0..9",
                "8       9    direction from UTC        '+' / '-'",
                "9      10    hours from UTC            0..11",
                "10      11    minutes from UTC          0..59",
                "",
                "For example, Tuesday May 26, 1992 at 1:30:15 PM EDT would be displayed as:",
                "",
                "1992-5-26,13:30:15.0,-4:0",
                "",
                "Note that if only local time is known, then timezone information (fields 8-10) is not present."
            ],
            "SYNTAX": [
                "OCTET STRING",
                {
                    "SIZE": [
                        8,
                        11
                    ]
                }
            ]
        }
    },
    "StorageType": {
        "TEXTUAL-CONVENTION": {
            "STATUS": "current",
            "DESCRIPTION": [
                "Describes the memory realization of a conceptual row.  A",
                "row which is volatile(2) is lost upon reboot.  A row which",
                "is either nonVolatile(3), permanent(4) or readOnly(5), is",
                "backed up by stable storage.  A row which is permanent(4)",
                "can be changed but not deleted.  A row which is readOnly(5)",
                "cannot be changed nor deleted.",
                "",
                "If the value of an object with this syntax is either permanent(4) or readOnly(5), it cannot be modified. Conversely, if the value is either other(1), volatile(2) or nonVolatile(3), it cannot be modified to be permanent(4) or readOnly(5).",
                "",
                "Every usage of this textual convention is required to specify the columnar objects which a permanent(4) row must at a minimum allow to be writable."
            ],
            "SYNTAX": [
                "INTEGER",
                {
                    "1": "other",
                    "2": "volatile",
                    "3": "nonVolatile",
                    "4": "permanent",
                    "5": "readOnly"
                }
            ]
        }
    },
    "TDomain": {
        "TEXTUAL-CONVENTION": {
            "STATUS": "current",
            "DESCRIPTION": [
                "Denotes a kind of transport service.",
                "",
                "Some possible values, such as snmpUDPDomain, are defined in 'Transport Mappings for Version 2 of the Simple Network Management Protocol (SNMPv2)'."
            ],
            "SYNTAX": "OBJECT IDENTIFIER"
        }
    },
    "TAddress": {
        "TEXTUAL-CONVENTION": {
            "STATUS": "current",
            "DESCRIPTION": [
                "Denotes a transport service address.",
                "",
                "For snmpUDPDomain, a TAddress is 6 octets long, the initial 4 octets containing the IP-address in network-byte order and the last 2 containing the UDP port in network-byte order. Consult 'Transport Mappings for Version 2 of the Simple Network Management Protocol (SNMPv2)' for further information on snmpUDPDomain."
            ],
            "SYNTAX": [
                "OCTET STRING",
                {
                    "SIZE": {
                        "min": 1,
                        "max": 255
                    }
                }
            ]
        }
    },
    "snmpMIB": {
        "MODULE-IDENTITY": {
            "0": {
                "REVISION": "200210160000Z",
                "DESCRIPTION": [
                    "This revision of this MIB module was published as",
                    "RFC 3418."
                ]
            },
            "1": {
                "REVISION": "199511090000Z",
                "DESCRIPTION": [
                    "This revision of this MIB module was published as",
                    "RFC 1907."
                ]
            },
            "2": {
                "REVISION": "199304010000Z",
                "DESCRIPTION": [
                    "The initial revision of this MIB module was published",
                    "as RFC 1450."
                ]
            },
            "LAST-UPDATED": [
                "200210160000Z"
            ],
            "ORGANIZATION": [
                "IETF SNMPv3 Working Group"
            ],
            "CONTACT-INFO": [
                "WG-EMail:   snmpv3@lists.tislabs.com",
                "Subscribe:  snmpv3-request@lists.tislabs.com",
                "",
                "Co-Chair:   Russ Mundy",
                "Network Associates Laboratories",
                "postal:     15204 Omega Drive, Suite 300",
                "Rockville, MD 20850-4601",
                "USA",
                "EMail:      mundy@tislabs.com",
                "phone:      +1 301 947-7107",
                "",
                "Co-Chair:   David Harrington",
                "Enterasys Networks",
                "postal:     35 Industrial Way",
                "P. O. Box 5005",
                "Rochester, NH 03866-5005",
                "USA",
                "EMail:      dbh@enterasys.com",
                "phone:      +1 603 337-2614",
                "",
                "Editor:     Randy Presuhn",
                "BMC Software, Inc.",
                "postal:     2141 North First Street",
                "San Jose, CA 95131",
                "USA",
                "EMail:      randy_presuhn@bmc.com",
                "phone:      +1 408 546-1006"
            ],
            "DESCRIPTION": [
                "The MIB module for SNMP entities.",
                "",
                "Copyright (C) The Internet Society (2002). This",
                "version of this MIB module is part of RFC 3418;",
                "see the RFC itself for full legal notices.",
                ""
            ],
            "::=": [
                "snmpModules",
                1
            ]
        }
    },
    "snmpMIBObjects": {
        "OBJECT IDENTIFIER": {
            "::=": [
                "snmpMIB",
                1
            ]
        }
    },
    "sysORLastChange": {
        "OBJECT-TYPE": {
            "SYNTAX": "TimeStamp",
            "MAX-ACCESS": "read-only",
            "STATUS": "current",
            "DESCRIPTION": [
                "The value of sysUpTime at the time of the most recent",
                "change in state or value of any instance of sysORID."
            ],
            "::=": [
                "system",
                8
            ]
        }
    },
    "sysORTable": {
        "OBJECT-TYPE": {
            "SYNTAX": [
                "SEQUENCE OF",
                "SysOREntry"
            ],
            "MAX-ACCESS": "not-accessible",
            "STATUS": "current",
            "DESCRIPTION": [
                "The (conceptual) table listing the capabilities of",
                "the local SNMP application acting as a command",
                "responder with respect to various MIB modules.",
                "SNMP entities having dynamically-configurable support",
                "of MIB modules will have a dynamically-varying number",
                "of conceptual rows."
            ],
            "::=": [
                "system",
                9
            ]
        }
    },
    "sysOREntry": {
        "OBJECT-TYPE": {
            "SYNTAX": "SysOREntry",
            "MAX-ACCESS": "not-accessible",
            "STATUS": "current",
            "DESCRIPTION": [
                "An entry (conceptual row) in the sysORTable."
            ],
            "INDEX": "sysORIndex",
            "::=": [
                "sysORTable",
                1
            ]
        }
    },
    "SysOREntry": {
        "SEQUENCE": [
            [
                "sysORIndex",
                "INTEGER"
            ],
            [
                "sysORID",
                "OBJECT IDENTIFIER"
            ],
            [
                "sysORDescr",
                "DisplayString"
            ],
            [
                "sysORUpTime",
                "TimeStamp"
            ]
        ]
    },
    "sysORIndex": {
        "OBJECT-TYPE": {
            "SYNTAX": [
                "INTEGER",
                {
                    "min": 1,
                    "max": 2147483647
                }
            ],
            "MAX-ACCESS": "not-accessible",
            "STATUS": "current",
            "DESCRIPTION": [
                "The auxiliary variable used for identifying instances",
                "of the columnar objects in the sysORTable."
            ],
            "::=": [
                "sysOREntry",
                1
            ]
        }
    },
    "sysORID": {
        "OBJECT-TYPE": {
            "SYNTAX": "OBJECT IDENTIFIER",
            "MAX-ACCESS": "read-only",
            "STATUS": "current",
            "DESCRIPTION": [
                "An authoritative identification of a capabilities",
                "statement with respect to various MIB modules supported",
                "by the local SNMP application acting as a command",
                "responder."
            ],
            "::=": [
                "sysOREntry",
                2
            ]
        }
    },
    "sysORDescr": {
        "OBJECT-TYPE": {
            "SYNTAX": "DisplayString",
            "MAX-ACCESS": "read-only",
            "STATUS": "current",
            "DESCRIPTION": [
                "A textual description of the capabilities identified",
                "by the corresponding instance of sysORID."
            ],
            "::=": [
                "sysOREntry",
                3
            ]
        }
    },
    "sysORUpTime": {
        "OBJECT-TYPE": {
            "SYNTAX": "TimeStamp",
            "MAX-ACCESS": "read-only",
            "STATUS": "current",
            "DESCRIPTION": [
                "The value of sysUpTime at the time this conceptual",
                "row was last instantiated."
            ],
            "::=": [
                "sysOREntry",
                4
            ]
        }
    },
    "snmpSilentDrops": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter32",
            "MAX-ACCESS": "read-only",
            "STATUS": "current",
            "DESCRIPTION": [
                "The total number of Confirmed Class PDUs (such as",
                "GetRequest-PDUs, GetNextRequest-PDUs,",
                "GetBulkRequest-PDUs, SetRequest-PDUs, and",
                "InformRequest-PDUs) delivered to the SNMP entity which",
                "were silently dropped because the size of a reply",
                "containing an alternate Response Class PDU (such as a",
                "Response-PDU) with an empty variable-bindings field",
                "was greater than either a local constraint or the",
                "maximum message size associated with the originator of",
                "the request."
            ],
            "::=": [
                "snmp",
                31
            ]
        }
    },
    "snmpProxyDrops": {
        "OBJECT-TYPE": {
            "SYNTAX": "Counter32",
            "MAX-ACCESS": "read-only",
            "STATUS": "current",
            "DESCRIPTION": [
                "The total number of Confirmed Class PDUs",
                "(such as GetRequest-PDUs, GetNextRequest-PDUs,",
                "GetBulkRequest-PDUs, SetRequest-PDUs, and",
                "InformRequest-PDUs) delivered to the SNMP entity which",
                "were silently dropped because the transmission of",
                "the (possibly translated) message to a proxy target",
                "failed in a manner (other than a time-out) such that",
                "no Response Class PDU (such as a Response-PDU) could",
                "be returned."
            ],
            "::=": [
                "snmp",
                32
            ]
        }
    },
    "snmpTrap": {
        "OBJECT IDENTIFIER": {
            "::=": [
                "snmpMIBObjects",
                4
            ]
        }
    },
    "snmpTrapOID": {
        "OBJECT-TYPE": {
            "SYNTAX": "OBJECT IDENTIFIER",
            "MAX-ACCESS": "accessible-for-notify",
            "STATUS": "current",
            "DESCRIPTION": [
                "The authoritative identification of the notification",
                "currently being sent.  This variable occurs as",
                "the second varbind in every SNMPv2-Trap-PDU and",
                "InformRequest-PDU."
            ],
            "::=": [
                "snmpTrap",
                1
            ]
        }
    },
    "snmpTrapEnterprise": {
        "OBJECT-TYPE": {
            "SYNTAX": "OBJECT IDENTIFIER",
            "MAX-ACCESS": "accessible-for-notify",
            "STATUS": "current",
            "DESCRIPTION": [
                "The authoritative identification of the enterprise",
                "associated with the trap currently being sent.  When an",
                "SNMP proxy agent is mapping an RFC1157 Trap-PDU",
                "into a SNMPv2-Trap-PDU, this variable occurs as the",
                "last varbind."
            ],
            "::=": [
                "snmpTrap",
                3
            ]
        }
    },
    "snmpTraps": {
        "OBJECT IDENTIFIER": {
            "::=": [
                "snmpMIBObjects",
                5
            ]
        }
    },
    "coldStart": {
        "NOTIFICATION-TYPE": {
            "STATUS": "current",
            "DESCRIPTION": [
                "A coldStart trap signifies that the SNMP entity,",
                "supporting a notification originator application, is",
                "reinitializing itself and that its configuration may",
                "have been altered."
            ],
            "::=": [
                "snmpTraps",
                1
            ]
        }
    },
    "warmStart": {
        "NOTIFICATION-TYPE": {
            "STATUS": "current",
            "DESCRIPTION": [
                "A warmStart trap signifies that the SNMP entity,",
                "supporting a notification originator application,",
                "is reinitializing itself such that its configuration",
                "is unaltered."
            ],
            "::=": [
                "snmpTraps",
                2
            ]
        }
    },
    "authenticationFailure": {
        "NOTIFICATION-TYPE": {
            "STATUS": "current",
            "DESCRIPTION": [
                "An authenticationFailure trap signifies that the SNMP",
                "entity has received a protocol message that is not",
                "properly authenticated.  While all implementations",
                "of SNMP entities MAY be capable of generating this",
                "trap, the snmpEnableAuthenTraps object indicates",
                "whether this trap will be generated."
            ],
            "::=": [
                "snmpTraps",
                5
            ]
        }
    },
    "snmpSet": {
        "OBJECT IDENTIFIER": {
            "::=": [
                "snmpMIBObjects",
                6
            ]
        }
    },
    "snmpSetSerialNo": {
        "OBJECT-TYPE": {
            "SYNTAX": "TestAndIncr",
            "MAX-ACCESS": "read-write",
            "STATUS": "current",
            "DESCRIPTION": [
                "An advisory lock used to allow several cooperating",
                "command generator applications to coordinate their",
                "use of the SNMP set operation.",
                "",
                "This object is used for coarse-grain coordination.",
                "To achieve fine-grain coordination, one or more similar",
                "objects might be defined within each MIB group, as",
                "appropriate."
            ],
            "::=": [
                "snmpSet",
                1
            ]
        }
    },
    "snmpMIBConformance": {
        "OBJECT IDENTIFIER": {
            "::=": [
                "snmpMIB",
                2
            ]
        }
    },
    "snmpMIBCompliances": {
        "OBJECT IDENTIFIER": {
            "::=": [
                "snmpMIBConformance",
                1
            ]
        }
    },
    "snmpMIBGroups": {
        "OBJECT IDENTIFIER": {
            "::=": [
                "snmpMIBConformance",
                2
            ]
        }
    },
    "snmpBasicCompliance": {
        "MODULE-COMPLIANCE": {
            "0": {
                "MODULE": [
                    "MANDATORY-GROUPS",
                    [
                        {
                            "GROUP": "snmpCommunityGroup",
                            "DESCRIPTION": [
                                "This group is mandatory for SNMPv2 entities which",
                                "support community-based authentication."
                            ]
                        }
                    ]
                ]
            },
            "STATUS": "deprecated",
            "DESCRIPTION": [
                "The compliance statement for SNMPv2 entities which",
                "implement the SNMPv2 MIB.",
                "",
                "This compliance statement is replaced by",
                "snmpBasicComplianceRev2."
            ],
            "::=": [
                "snmpMIBCompliances",
                2
            ]
        }
    },
    "snmpBasicComplianceRev2": {
        "MODULE-COMPLIANCE": {
            "0": {
                "MODULE": [
                    "MANDATORY-GROUPS",
                    [
                        {
                            "GROUP": "snmpCommunityGroup",
                            "DESCRIPTION": [
                                "This group is mandatory for SNMP entities which",
                                "support community-based authentication."
                            ]
                        },
                        {
                            "GROUP": "snmpWarmStartNotificationGroup",
                            "DESCRIPTION": [
                                "This group is mandatory for an SNMP entity which",
                                "supports command responder applications, and is",
                                "able to reinitialize itself such that its",
                                "configuration is unaltered."
                            ]
                        }
                    ]
                ]
            },
            "STATUS": "current",
            "DESCRIPTION": [
                "The compliance statement for SNMP entities which",
                "implement this MIB module."
            ],
            "::=": [
                "snmpMIBCompliances",
                3
            ]
        }
    },
    "snmpGroup": {
        "OBJECT-GROUP": {
            "OBJECTS": [
                "snmpInPkts",
                "snmpInBadVersions",
                "snmpInASNParseErrs",
                "snmpSilentDrops",
                "snmpProxyDrops",
                "snmpEnableAuthenTraps"
            ],
            "STATUS": "current",
            "DESCRIPTION": [
                "A collection of objects providing basic instrumentation",
                "and control of an SNMP entity."
            ],
            "::=": [
                "snmpMIBGroups",
                8
            ]
        }
    },
    "snmpCommunityGroup": {
        "OBJECT-GROUP": {
            "OBJECTS": [
                "snmpInBadCommunityNames",
                "snmpInBadCommunityUses"
            ],
            "STATUS": "current",
            "DESCRIPTION": [
                "A collection of objects providing basic instrumentation",
                "of a SNMP entity which supports community-based",
                "authentication."
            ],
            "::=": [
                "snmpMIBGroups",
                9
            ]
        }
    },
    "snmpSetGroup": {
        "OBJECT-GROUP": {
            "OBJECTS": "snmpSetSerialNo",
            "STATUS": "current",
            "DESCRIPTION": [
                "A collection of objects which allow several cooperating",
                "command generator applications to coordinate their",
                "use of the set operation."
            ],
            "::=": [
                "snmpMIBGroups",
                5
            ]
        }
    },
    "systemGroup": {
        "OBJECT-GROUP": {
            "OBJECTS": [
                "sysDescr",
                "sysObjectID",
                "sysUpTime",
                "sysContact",
                "sysName",
                "sysLocation",
                "sysServices",
                "sysORLastChange",
                "sysORID",
                "sysORUpTime",
                "sysORDescr"
            ],
            "STATUS": "current",
            "DESCRIPTION": [
                "The system group defines objects which are common to all",
                "managed systems."
            ],
            "::=": [
                "snmpMIBGroups",
                6
            ]
        }
    },
    "snmpBasicNotificationsGroup": {
        "NOTIFICATION-GROUP": {
            "NOTIFICATIONS": [
                "coldStart",
                "authenticationFailure"
            ],
            "STATUS": "current",
            "DESCRIPTION": [
                "The basic notifications implemented by an SNMP entity",
                "supporting command responder applications."
            ],
            "::=": [
                "snmpMIBGroups",
                7
            ]
        }
    },
    "snmpWarmStartNotificationGroup": {
        "NOTIFICATION-GROUP": {
            "NOTIFICATIONS": "warmStart",
            "STATUS": "current",
            "DESCRIPTION": [
                "An additional notification for an SNMP entity supporting",
                "command responder applications, if it is able to reinitialize",
                "itself such that its configuration is unaltered."
            ],
            "::=": [
                "snmpMIBGroups",
                11
            ]
        }
    },
    "snmpNotificationGroup": {
        "OBJECT-GROUP": {
            "OBJECTS": [
                "snmpTrapOID",
                "snmpTrapEnterprise"
            ],
            "STATUS": "current",
            "DESCRIPTION": [
                "These objects are required for entities",
                "which support notification originator applications."
            ],
            "::=": [
                "snmpMIBGroups",
                12
            ]
        }
    },
    "snmpObsoleteGroup": {
        "OBJECT-GROUP": {
            "OBJECTS": [
                "snmpOutPkts",
                "snmpInTooBigs",
                "snmpInNoSuchNames",
                "snmpInBadValues",
                "snmpInReadOnlys",
                "snmpInGenErrs",
                "snmpInTotalReqVars",
                "snmpInTotalSetVars",
                "snmpInGetRequests",
                "snmpInGetNexts",
                "snmpInSetRequests",
                "snmpInGetResponses",
                "snmpInTraps",
                "snmpOutTooBigs",
                "snmpOutNoSuchNames",
                "snmpOutBadValues",
                "snmpOutGenErrs",
                "snmpOutGetRequests",
                "snmpOutGetNexts",
                "snmpOutSetRequests",
                "snmpOutGetResponses",
                "snmpOutTraps"
            ],
            "STATUS": "obsolete",
            "DESCRIPTION": [
                "A collection of objects from RFC 1213 made obsolete",
                "by this MIB module."
            ],
            "::=": [
                "snmpMIBGroups",
                10
            ]
        }
    }
}